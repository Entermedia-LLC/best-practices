(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[729],{7908:function(e,s,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/wordpress",function(){return t(4891)}])},2819:function(e,s,t){"use strict";var i=t(5893),n=t(5675),r=t(1220),a=t.n(r),l=t(2750);s.Z=function(e){var s=e.section,t=e.id,r=e.showLink,o=e.children,d="h".concat(s),c=t||"";return(0,i.jsx)(i.Fragment,{children:(0,i.jsxs)(d,{className:a().headline,id:c,children:[o,r&&c&&(0,i.jsxs)("a",{href:"#".concat(c),className:a().headline_link,children:[(0,i.jsx)("span",{className:a().headline_link_text,children:c}),(0,i.jsx)("span",{className:a().headline_link_icon,children:(0,i.jsx)(n.default,{src:"/images/icon-link.svg",width:14,height:14,alt:"Link to ".concat(c),loader:l.Z})})]})]})})}},3068:function(e,s,t){"use strict";t.d(s,{Z:function(){return f}});var i=t(5893),n=t(5675),r=t(1664),a=t(2750),l=t(3765),o=t.n(l),d=function(){return(0,i.jsxs)("header",{className:o().header,children:[(0,i.jsx)(r.default,{href:"/",children:(0,i.jsx)("a",{children:(0,i.jsx)(n.default,{src:"images/logo.svg",width:121,height:23,alt:"Logo",loader:a.Z})})}),(0,i.jsxs)("div",{className:o().links,children:[(0,i.jsxs)("ul",{children:[(0,i.jsx)("li",{children:(0,i.jsx)("a",{href:"https://www.entermedia.com/",target:"_blank",rel:"noreferrer",children:(0,i.jsx)(n.default,{src:"images/website.svg",width:16,height:16,alt:"Website",loader:a.Z})})}),(0,i.jsx)("li",{children:(0,i.jsx)("a",{href:"https://twitter.com/entermedia",target:"_blank",rel:"noreferrer",children:(0,i.jsx)(n.default,{src:"images/twitter.svg",width:16,height:16,alt:"Twitter",loader:a.Z})})}),(0,i.jsx)("li",{children:(0,i.jsx)("a",{href:"https://www.facebook.com/entermedia.llc/",target:"_blank",rel:"noreferrer",children:(0,i.jsx)(n.default,{src:"images/facebook.svg",width:16,height:16,alt:"Facebook",loader:a.Z})})}),(0,i.jsx)("li",{children:(0,i.jsx)("a",{href:"https://www.linkedin.com/company/entermedia-llc/",target:"_blank",rel:"noreferrer",children:(0,i.jsx)(n.default,{src:"images/linkedin.svg",width:16,height:16,alt:"LinkedIn",loader:a.Z})})}),(0,i.jsx)("li",{children:(0,i.jsx)("a",{href:"https://github.com/ENTERMEDIA",target:"_blank",rel:"noreferrer",children:(0,i.jsx)(n.default,{src:"images/github.svg",width:16,height:16,alt:"Github",loader:a.Z})})})]}),(0,i.jsx)("a",{href:"https://github.com/Entermedia-LLC/best-practices",target:"_blank",rel:"noreferrer",className:o().button,children:"Contribute on Github"})]})]})},c=(t(6486),[{id:"best-practices",path:"/",title:"Best Practices",children:[{path:"/",id:"audience",title:"Audience"},{path:"/",id:"goal",title:"Goal"},{path:"/",id:"contributing",title:"Contributing"}]},{id:"css",path:"/css",title:"CSS",children:[{path:"/css",id:"philosophy",title:"Philosophy"},{path:"/css",id:"accessibility",title:"Accessibility"},{path:"/css",id:"performance",title:"Performance"},{path:"/css",id:"responsive-design",title:"Responsive Design"},{path:"/css",id:"syntax",title:"Syntax and Formatting"},{path:"/css",id:"documentation",title:"Documentation"},{path:"/css",id:"frameworks",title:"Frameworks"},{path:"/css",id:"further-reading",title:"Further Reading"}]},{id:"js",path:"/js",title:"JavaScript",children:[{id:"style",path:"/js",title:"Code Style, Tooling & Documentation"},{id:"design-patterns",path:"/js",title:"Design Patterns"},{id:"performance",path:"/js",title:"Performance"},{id:"client-side-data",path:"/js",title:"Client-side Data"},{id:"testing",path:"/js",title:"Unit and Integration Testing"},{id:"libraries",path:"/js",title:"Libraries"},{id:"js-react",path:"/js/react",title:"React.js"},{id:"next-js",path:"/js/nextjs",title:"Next.js"},{id:"refresher",path:"/js",title:"Code Reference/Refresher"}]},{id:"markup",path:"/markup",title:"Markup",children:[]},{id:"php",path:"/php",title:"PHP",children:[]},{id:"tools",path:"/tools",title:"Tools",children:[]},{id:"wordpress",path:"/wordpress",title:"WordPress",children:[{id:"performance",path:"/wordpress",title:"Performance"},{id:"wpgraphql",path:"/wordpress",title:"WPGraphQL"}]},{id:"drupal",path:"/drupal",title:"Drupal",children:[]},{id:"design",path:"/design",title:"Project Design",children:[{id:"organization",path:"/design",title:"Organization"},{id:"package-management",path:"/design",title:"Package Management"}]},{id:"qa",path:"/qa",title:"Quality Assurance",children:[{id:"reporting-issues",path:"/qa",title:"Reporting Issues"}]}]),h=t(6541),u=t.n(h),p=function(){var e=function(s,t){var n=s.map((function(s,t){return function(s,t){return(0,i.jsxs)("li",{children:[(0,i.jsx)(r.default,{href:"".concat(s.path,"#").concat(s.id),children:(0,i.jsx)("a",{className:u().sidebar_link,children:s.title})}),s.children&&e(s.children,!0)]},t)}(s,t)})),a=[u().sidebar_list];return t&&a.push(u().sidebar_list__child),(0,i.jsx)("ul",{className:a.join(" "),children:n})};return(0,i.jsx)("aside",{className:u().sidebar,children:(0,i.jsx)("nav",{children:e(c)})})},g=t(7916),m=t.n(g);function f(e){var s=e.children;return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(d,{}),(0,i.jsx)(p,{}),(0,i.jsx)("main",{className:m().main,children:s})]})}},4891:function(e,s,t){"use strict";t.r(s),t.d(s,{default:function(){return c}});var i=t(5893),n=t(7294),r=t(9008),a=t(3068),l=t(2819),o=t(4725),d=t.n(o);t(1804),t(4335);function c(){return(0,n.useEffect)((function(){d().highlightAll()}),[]),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(r.default,{children:[(0,i.jsx)("title",{children:"QA Best Practices"}),(0,i.jsx)("meta",{name:"description",content:"Generated by create next app"}),(0,i.jsx)("link",{rel:"icon",href:"/favicon.ico"})]}),(0,i.jsx)(a.Z,{children:(0,i.jsxs)("section",{children:[(0,i.jsx)(l.Z,{section:"1",id:"wordpress",children:"WordPress"}),(0,i.jsx)(l.Z,{section:"2",id:"performance",showLink:!0,children:"Performance"}),(0,i.jsx)("p",{children:"Writing performant code is absolutely critical, especially at the enterprise level. There are a number of strategies and best practices we must employ to ensure our code is optimized for high-traffic situations."}),(0,i.jsx)(l.Z,{section:"3",showLink:!0,children:"Efficient Database Queries"}),(0,i.jsxs)("p",{children:["When querying the database in WordPress, you should generally use a"," ",(0,i.jsx)("a",{href:"https://developer.wordpress.org/reference/classes/wp_query/",target:"_blank",rel:"noreferrer",children:(0,i.jsx)("code",{children:"WP_Query"})})," ","object. ",(0,i.jsx)("code",{children:"WP_Query"})," objects take a number of useful arguments and do things behind-the-scenes that other database access methods such as"," ",(0,i.jsx)("a",{href:"https://developer.wordpress.org/reference/functions/get_posts/",target:"_blank",rel:"noreferrer",children:(0,i.jsx)("code",{children:"get_posts()"})})," ","do not."]}),(0,i.jsx)("p",{children:"Here are a few key points:"}),(0,i.jsxs)("ul",{children:[(0,i.jsxs)("li",{children:[(0,i.jsx)("p",{children:"Only run the queries that you need."}),(0,i.jsxs)("p",{children:["A new ",(0,i.jsx)("code",{children:"WP_Query"})," object runs five queries by default, including calculating pagination and priming the term and meta caches. Each of the following arguments will remove a query:"]}),(0,i.jsxs)("ul",{children:[(0,i.jsxs)("li",{children:[(0,i.jsx)("code",{children:"'no_found_rows' => true"}),": useful when pagination is not needed."]}),(0,i.jsxs)("li",{children:[(0,i.jsx)("code",{children:"'update_post_meta_cache' => false"}),": useful when post meta will not be utilized."]}),(0,i.jsxs)("li",{children:[(0,i.jsx)("code",{children:"'update_post_term_cache' => false"}),": useful when taxonomy terms will not be utilized."]}),(0,i.jsxs)("li",{children:[(0,i.jsx)("code",{children:"'fields' => 'ids'"}),": useful when only the post IDs are needed (less typical)."]})]})]}),(0,i.jsxs)("li",{children:[(0,i.jsxs)("p",{children:["Do not use ",(0,i.jsx)("code",{children:"posts_per_page => -1"}),"."]}),(0,i.jsx)("p",{children:"This is a performance hazard. What if we have 100,000 posts? This could crash the site. If you are writing a widget, for example, and just want to grab all of a custom post type, determine a reasonable upper limit for your situation."}),(0,i.jsx)("pre",{children:(0,i.jsx)("code",{className:"language-php",children:"<?php\n// Query for 500 posts.\nnew WP_Query( array(\n  'posts_per_page' => 500,\n));\n?>"})})]}),(0,i.jsxs)("li",{children:[(0,i.jsxs)("p",{children:["Do not use ",(0,i.jsx)("code",{children:"$wpdb"})," or ",(0,i.jsx)("code",{children:"get_posts()"})," unless you have good reason."]}),(0,i.jsxs)("p",{children:[(0,i.jsx)("code",{children:"get_posts()"})," actually calls ",(0,i.jsx)("code",{children:"WP_Query"}),", but calling ",(0,i.jsx)("code",{children:"get_posts()"})," directly bypasses a number of filters by default. Not sure whether you need these things or not? You probably don\u2019t."]})]}),(0,i.jsxs)("li",{children:[(0,i.jsxs)("p",{children:["If you don\u2019t plan to paginate query results, always pass"," ",(0,i.jsx)("code",{children:"no_found_rows => true"})," to ",(0,i.jsx)("code",{children:"WP_Query"}),"."]}),(0,i.jsxs)("p",{children:["This will tell WordPress not to run"," ",(0,i.jsx)("code",{children:"SQL_CALC_FOUND_ROWS"})," on the SQL query, drastically speeding up your query. ",(0,i.jsx)("code",{children:"SQL_CALC_FOUND_ROWS"})," ","calculates the total number of rows in your query which is required to know the total amount of \u201cpages\u201d for pagination."]}),(0,i.jsx)("pre",{children:(0,i.jsx)("code",{className:"language-php",children:"<?php\n// Skip SQL_CALC_FOUND_ROWS for performance (no pagination).\nnew WP_Query( array(\n  'no_found_rows' => true,\n));\n?>"})})]}),(0,i.jsxs)("li",{children:[(0,i.jsxs)("p",{children:["Avoid using ",(0,i.jsx)("code",{children:"post__not_in"}),"."]}),(0,i.jsx)("p",{children:"In most cases it\u2019s quicker to filter out the posts you don\u2019t need in PHP instead of within the query. This also means it can take advantage of better caching. This won\u2019t work correctly (without additional tweaks) for pagination."}),(0,i.jsx)("p",{children:"Use:"}),(0,i.jsx)("pre",{children:(0,i.jsx)("code",{className:"language-php",children:"<?php\n$foo_query = new WP_Query( array(\n    'post_type' => 'post',\n    'posts_per_page' => 30 + count( $posts_to_exclude )\n) );\n\nif ( $foo_query->have_posts() ) :\n    while ( $foo_query->have_posts() ) :\n        $foo_query->the_post();\n        if ( in_array( get_the_ID(), $posts_to_exclude ) ) {\n            continue;\n        }\n        the_title();\n    endwhile;\nendif;\n?>"})}),(0,i.jsx)("p",{children:"Instead of:"}),(0,i.jsx)("pre",{children:(0,i.jsx)("code",{className:"language-php",children:"<?php\n$foo_query = new WP_Query( array(\n    'post_type' => 'post',\n    'posts_per_page' => 30,\n    'post__not_in' => $posts_to_exclude\n) );\n?>"})}),(0,i.jsxs)("p",{children:["See"," ",(0,i.jsx)("a",{href:"https://vip.wordpress.com/documentation/performance-improvements-by-removing-usage-of-post__not_in/",target:"_blank",rel:"noreferrer",children:"WordPress VIP"}),"."]})]}),(0,i.jsxs)("li",{children:[(0,i.jsxs)("p",{children:["A"," ",(0,i.jsx)("a",{href:"https://wordpress.org/support/article/taxonomies/",target:"_blank",rel:"noreferrer",children:"taxonomy"})," ","is a tool that lets us group or classify posts."]}),(0,i.jsxs)("p",{children:[(0,i.jsx)("a",{href:"https://wordpress.org/support/article/custom-fields/",target:"_blank",rel:"noreferrer",children:"Post meta"})," ","lets us store unique information about specific posts. As such the way post meta is stored does not facilitate efficient post lookups. Generally, looking up posts by post meta should be avoided (sometimes it can\u2019t). If you have to use one, make sure that it\u2019s not the main query and that it\u2019s cached."]})]}),(0,i.jsxs)("li",{children:[(0,i.jsxs)("p",{children:["Passing ",(0,i.jsx)("code",{children:"cache_results => false"})," to"," ",(0,i.jsx)("code",{children:"WP_Query"})," is usually not a good idea."]}),(0,i.jsxs)("p",{children:["If ",(0,i.jsx)("code",{children:"cache_results => true"})," (which is true by default if you have caching enabled and an object cache setup),"," ",(0,i.jsx)("code",{children:"WP_Query"})," will cache the posts found among other things. It makes sense to use"," ",(0,i.jsx)("code",{children:"cache_results => false"})," in rare situations (possibly WP-CLI commands)."]})]}),(0,i.jsxs)("li",{children:[(0,i.jsx)("p",{children:"Multi-dimensional queries should be avoided."}),(0,i.jsx)("p",{children:"Examples of multi-dimensional queries include:"}),(0,i.jsx)("pre",{children:(0,i.jsx)("code",{className:"language-markup",children:"* Querying for posts based on terms across multiple taxonomies\n* Querying multiple post meta keys"})}),(0,i.jsx)("p",{children:"Each extra dimension of a query joins an extra database table. Instead, query by the minimum number of dimensions possible and use PHP to filter out results you don\u2019t need."}),(0,i.jsx)("p",{children:"Here is an example of a 2-dimensional query:"}),(0,i.jsx)("pre",{children:(0,i.jsx)("code",{className:"language-php",children:"<?php\n// Query for posts with both a particular category and tag.\nnew WP_Query( array(\n  'category_name' => 'cat-slug',\n  'tag' => 'tag-slug',\n));\n?>"})})]})]}),(0,i.jsx)(l.Z,{section:"2",id:"wpgraphql",showLink:!0,children:"WPGraphQL"}),(0,i.jsx)("p",{children:"If you are choosing to use GraphQL on a WordPress project, it is recommended to use the WPGraphQL plugin. This plugin will return WordPress data in JSON format through a GraphQL endpoint - in many cases you won\u2019t need to write the schema yourself. This will give you all the benefits of concatenating your data requests as well as easy access to your data as it is output by WordPress. You can retrieve your data by passing a query directly into a simple fetch request:"}),(0,i.jsx)("pre",{children:(0,i.jsx)("code",{className:"language-javascript",children:"fetch('/graphql', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ query: '[your query string goes here]' }),\n  }).then((res) => res.json());"})}),(0,i.jsx)("p",{children:"The above code snippet will help you get started in making requests to the GraphQL service."})]})})]})}},2750:function(e,s){"use strict";s.Z=function(e){var s=e.src;return"https://entermedia-llc.github.io/best-practices/".concat(s)}},1220:function(e){e.exports={headline_link_icon:"Headline_headline_link_icon__4OS6G",headline_link_text:"Headline_headline_link_text__pt029",headline_link:"Headline_headline_link__EWxGu"}},3765:function(e){e.exports={header:"Header_header__sgqkZ",button:"Header_button__KpYk3",links:"Header_links__SVcXu"}},6541:function(e){e.exports={sidebar:"Sidebar_sidebar__RJId5",sidebar_list:"Sidebar_sidebar_list__uBvot",sidebar_link:"Sidebar_sidebar_link__8ZxWT",sidebar_list__child:"Sidebar_sidebar_list__child__ys_mL"}},7916:function(e){e.exports={main:"Default_main__v1_uO"}},4335:function(){Prism.languages.markup={comment:{pattern:/<!--(?:(?!<!--)[\s\S])*?-->/,greedy:!0},prolog:{pattern:/<\?[\s\S]+?\?>/,greedy:!0},doctype:{pattern:/<!DOCTYPE(?:[^>"'[\]]|"[^"]*"|'[^']*')+(?:\[(?:[^<"'\]]|"[^"]*"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\]\s*)?>/i,greedy:!0,inside:{"internal-subset":{pattern:/(^[^\[]*\[)[\s\S]+(?=\]>$)/,lookbehind:!0,greedy:!0,inside:null},string:{pattern:/"[^"]*"|'[^']*'/,greedy:!0},punctuation:/^<!|>$|[[\]]/,"doctype-tag":/^DOCTYPE/i,name:/[^\s<>'"]+/}},cdata:{pattern:/<!\[CDATA\[[\s\S]*?\]\]>/i,greedy:!0},tag:{pattern:/<\/?(?!\d)[^\s>\/=$<%]+(?:\s(?:\s*[^\s>\/=]+(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))|(?=[\s/>])))+)?\s*\/?>/,greedy:!0,inside:{tag:{pattern:/^<\/?[^\s>\/]+/,inside:{punctuation:/^<\/?/,namespace:/^[^\s>\/:]+:/}},"special-attr":[],"attr-value":{pattern:/=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+)/,inside:{punctuation:[{pattern:/^=/,alias:"attr-equals"},/"|'/]}},punctuation:/\/?>/,"attr-name":{pattern:/[^\s>\/]+/,inside:{namespace:/^[^\s>\/:]+:/}}}},entity:[{pattern:/&[\da-z]{1,8};/i,alias:"named-entity"},/&#x?[\da-f]{1,8};/i]},Prism.languages.markup.tag.inside["attr-value"].inside.entity=Prism.languages.markup.entity,Prism.languages.markup.doctype.inside["internal-subset"].inside=Prism.languages.markup,Prism.hooks.add("wrap",(function(e){"entity"===e.type&&(e.attributes.title=e.content.replace(/&amp;/,"&"))})),Object.defineProperty(Prism.languages.markup.tag,"addInlined",{value:function(e,s){var t={};t["language-"+s]={pattern:/(^<!\[CDATA\[)[\s\S]+?(?=\]\]>$)/i,lookbehind:!0,inside:Prism.languages[s]},t.cdata=/^<!\[CDATA\[|\]\]>$/i;var i={"included-cdata":{pattern:/<!\[CDATA\[[\s\S]*?\]\]>/i,inside:t}};i["language-"+s]={pattern:/[\s\S]+/,inside:Prism.languages[s]};var n={};n[e]={pattern:RegExp(/(<__[^>]*>)(?:<!\[CDATA\[(?:[^\]]|\](?!\]>))*\]\]>|(?!<!\[CDATA\[)[\s\S])*?(?=<\/__>)/.source.replace(/__/g,(function(){return e})),"i"),lookbehind:!0,greedy:!0,inside:i},Prism.languages.insertBefore("markup","cdata",n)}}),Object.defineProperty(Prism.languages.markup.tag,"addAttribute",{value:function(e,s){Prism.languages.markup.tag.inside["special-attr"].push({pattern:RegExp(/(^|["'\s])/.source+"(?:"+e+")"+/\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))/.source,"i"),lookbehind:!0,inside:{"attr-name":/^[^\s=]+/,"attr-value":{pattern:/=[\s\S]+/,inside:{value:{pattern:/(^=\s*(["']|(?!["'])))\S[\s\S]*(?=\2$)/,lookbehind:!0,alias:[s,"language-"+s],inside:Prism.languages[s]},punctuation:[{pattern:/^=/,alias:"attr-equals"},/"|'/]}}}})}}),Prism.languages.html=Prism.languages.markup,Prism.languages.mathml=Prism.languages.markup,Prism.languages.svg=Prism.languages.markup,Prism.languages.xml=Prism.languages.extend("markup",{}),Prism.languages.ssml=Prism.languages.xml,Prism.languages.atom=Prism.languages.xml,Prism.languages.rss=Prism.languages.xml}},function(e){e.O(0,[662,247,521,774,888,179],(function(){return s=7908,e(e.s=s);var s}));var s=e.O();_N_E=s}]);