(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[806],{1013:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/js",function(){return n(5101)}])},5101:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return f}});var r=n(5893),s=n(7294),o=n(2750),a=n(5675),i=n(9008),l=n(1664),c=n(3068),d=n(2819),h=n(4725),u=n.n(h),p=(n(1804),n(2390)),m=n.n(p);function f(){return(0,s.useEffect)((function(){u().highlightAll()}),[]),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(i.default,{children:(0,r.jsx)("title",{children:"Javascript | Entermedia Best Practices"})}),(0,r.jsx)(c.Z,{children:(0,r.jsxs)("section",{children:[(0,r.jsx)(d.Z,{section:"1",id:"js",children:"JavaScript"}),(0,r.jsx)(d.Z,{section:"2",id:"style",showLink:!0,children:"Code Style, Tooling & Documentation"}),(0,r.jsxs)("p",{children:["Entermedia maintains a"," ",(0,r.jsx)("a",{href:"https://github.com/Entermedia-LLC/eslint-config",target:"_blank",rel:"noreferrer",children:"eslint shareable config"})," ","that is used across all Entermedia projects. It exposes several different configs and engineers should opt-in to the config that best fits the project."]}),(0,r.jsxs)("p",{children:["As far as JavaScript documentation goes, we conform to the"," ",(0,r.jsx)("a",{href:"https://make.wordpress.org/core/handbook/best-practices/inline-documentation-standards/javascript/",target:"_blank",rel:"noreferrer",children:"WordPress JavaScript documentation standards"})," ","and those standards are enforced by Entermedia's eslint config."]}),(0,r.jsx)(d.Z,{section:"2",id:"design-patterns",showLink:!0,children:"Design Patterns"}),(0,r.jsx)("p",{children:"Standardizing the way we structure our JavaScript allows us to collaborate more effectively with one another. Using intelligent design patterns improves maintainability, code readability, and even helps to prevent bugs."}),(0,r.jsx)(d.Z,{section:"3",children:"Writing Modern JavaScript"}),(0,r.jsx)("p",{children:"It\u2019s important we use language features that are intended to be used. This means not using deprecated functions, methods, or properties. Whether we are using plain JavaScript or a library, we should not use deprecated features. Using deprecated features can have negative effects on performance, security, maintainability, and compatibility."}),(0,r.jsx)("p",{children:"On all new projects you should be using up to date JavaScript methodologies combined with a build process tool like Babel to ensure browser compatibility. This allows us to utilize modern techniques while being certain our code will not break in older systems."}),(0,r.jsx)("p",{children:"Some older projects that have not yet been upgraded may not have the capability to use the most modern techniques, but it is still important to have processes in place that allow us to grow the technology stack as a project matures. In these cases, you should still follow best practice recommendations even if the newest patterns are not yet available to you."}),(0,r.jsx)(d.Z,{section:"4",children:"Using Classes"}),(0,r.jsx)("p",{children:"Before ES6, classes in JavaScript were created by building a constructor function and adding properties by extending the prototype object. This created a fairly complex way to extend classes and deal with prototypal inheritance. Modern techniques allow us to create and extend classes directly and write cleaner code:"}),(0,r.jsx)("pre",{children:(0,r.jsx)("code",{className:"language-javascript",children:"class BasicExample {\n    constructor(el) {\n      super(); // if you're extending\n    }\n\n    init() {\n      console.log('Hello world.');\n    }\n  }"})}),(0,r.jsx)("p",{children:"Classes in modern JavaScript offer a nicer syntax to access the standard prototypal inheritance we\u2019ve already had for a while, but can also help guide the structure of componentized code. When deciding whether or not to use a Class, think of the code you\u2019re writing in the greater context of the application."}),(0,r.jsx)("p",{children:"Classes will not always be the answer for creating modular code in your application, but you should consider them when you need to create discrete components or when those components need to inherit behaviors from other components, while still functioning as a single unit. For example, a utility function that searches a string for text may not be a good utilization of Classes, but an accordion menu with children components would."}),(0,r.jsx)(d.Z,{section:"4",children:"Using Arrow Functions"}),(0,r.jsx)("p",{children:"Arrow functions are a great way to slim down easily executable code blocks. When using this style of function be sure not to over engineer a simple action just to make it smaller. For example, this is a good use of a simple multiline function being compressed into a single line:"}),(0,r.jsx)("p",{children:"Multi-line:"}),(0,r.jsx)("pre",{children:(0,r.jsx)("code",{className:"language-javascript",children:"const init = (msg) => {\n    console.log(msg);\n  };"})}),(0,r.jsx)("p",{children:"Single line:"}),(0,r.jsx)("pre",{children:(0,r.jsx)("code",{className:"language-javascript",children:"const init = (msg) => console.log(msg);"})}),(0,r.jsx)("p",{children:"This is a very simple function, so compressing it down into a single line won\u2019t cause any readability issues. However, the more complicated this function gets, the less likely it should be on a single line."}),(0,r.jsx)("p",{children:"Even though single argument arrow functions don\u2019t require parenthesis around the argument itself, it is best to include the parenthesis for improved readability and scalability of the function."}),(0,r.jsxs)("p",{children:["Something important to remember is that arrow functions are not always the answer. Their release addressed a very specific problem many engineers were facing with preserving the context of"," ",(0,r.jsx)("code",{children:"this"}),". In a traditional function ",(0,r.jsx)("code",{children:"this"})," is bound to different values depending on the context it is called. With arrow functions, it is bound to the code that contains the arrow function. Because arrow functions also have syntax benefits, as a general rule, use arrow functions unless you need a more traditional treatment of ",(0,r.jsx)("code",{children:"this"})," (like in an event listener)."]}),(0,r.jsx)(d.Z,{section:"4",children:"Concatenating Strings and Templating"}),(0,r.jsxs)("p",{children:["When dealing with strings in JavaScript, it is very common to need some form of concatenation along the way. Before ES6 we were concatenating string with the ",(0,r.jsx)("code",{children:"+"})," operator:"]}),(0,r.jsx)("pre",{children:(0,r.jsx)("code",{className:"language-javascript",children:"/* eslint-disable */\n  var first = 'hello';\n  var last = 'world';\n  var msg = 'I said, \"' + first + ' ' + last + '\" to the crowd.';"})}),(0,r.jsx)("p",{children:"Modern techniques give us something called, \u201ctemplate literals\u201d, which let us concatenate strings in a much more straightforward manner utilizing the back tick and some basic templating:"}),(0,r.jsx)("pre",{children:(0,r.jsx)("code",{className:"language-javascript",children:"const first = 'hello';\n  const last = 'world';\n  const msg = `I said, \"${first} ${last},\" to the crowd.`;"})}),(0,r.jsx)(d.Z,{section:"4",children:"Destructuring Arrays and Objects"}),(0,r.jsx)("p",{children:"Destructuring is a JavaScript technique that allows you to easily assign values and properties from arrays and objects into specific variables. This direct mapping affords an easy way to access data from objects and arrays in a more convenient syntax."}),(0,r.jsx)("p",{className:m()["error-text"],children:"The old way:"}),(0,r.jsx)("pre",{children:(0,r.jsx)("code",{className:"language-javascript",children:"const arr = [1, 2, 3, 4];\n  const a = arr[0];\n  const b = arr[1];\n  const c = arr[2];\n  const d = arr[3];"})}),(0,r.jsx)("p",{className:m()["success-text"],children:"The new way:"}),(0,r.jsx)("pre",{children:(0,r.jsx)("code",{className:"language-javascript",children:"const [a, b, c, d] = [1, 2, 3, 4];\n  console.log(a); // 1\n  console.log(b); // 2\n  console.log(c); // 3\n  console.log(d); // 4"})}),(0,r.jsx)("p",{children:"Use destructuring whenever possible to slim down your code and improve overall readability."}),(0,r.jsx)(d.Z,{section:"4",children:"Componentizing Your Code"}),(0,r.jsxs)("p",{children:["Keeping different bits of functionality in your code reasonably separated is important to building and maintaining a scalable system over time. In the past we\u2019ve had to accomplish this with our build systems leaning on concatenation as an abstraction layer to the project. Modern JavaScript techniques allow us to utilize"," ",(0,r.jsx)("code",{children:"import"})," statements to break apart and reassemble your code into consumable chunks."]}),(0,r.jsxs)("p",{children:["When you\u2019re building your project, be sure to lean on imports to wire your application together. As of right now, we do still need a build system to process the code so it can be consumed by a browser, but using this modern technique will make sure our code is well structured as the project ages. You can also use ",(0,r.jsx)("code",{children:"import"})," ","statements to load parts of an external library you may need for any given component. The code below will give you an example:"]}),(0,r.jsx)("pre",{children:(0,r.jsx)("code",{className:"language-javascript",children:"// Only loading in the map method from lodash, because that's all we need!\n  import map from 'lodash/map';"})}),(0,r.jsx)("p",{children:"This also allows you to build one component and import it into another."}),(0,r.jsx)("p",{children:"It\u2019s also worth noting that named exports can be imported by wrapping the exported function within curly braces:"}),(0,r.jsx)("pre",{children:(0,r.jsx)("code",{className:"language-javascript",children:"import { example } from 'example/lib';"})}),(0,r.jsx)("p",{children:"This is only possible if the exported component is a named export like so:"}),(0,r.jsx)("pre",{children:(0,r.jsx)("code",{className:"language-javascript",children:"export const example = 66;"})}),(0,r.jsx)(d.Z,{section:"3",children:"Modules"}),(0,r.jsx)("p",{children:"When creating your own modules be sure to think about how it should be used by others. Luckily ES6 modules makes this a simple task."}),(0,r.jsx)("p",{children:"There are many ways you can export a module, but typically exposing specific functions and/or data structures through an ES6 module is the preferred way."}),(0,r.jsx)("pre",{children:(0,r.jsx)("code",{className:"language-javascript",children:"// datastructure.js\n  // private variable to the module\n  const data = {};\n\n  // private function to the module\n  const process = (value) => {\n    // complex logic\n    return value;\n  };\n\n  // the two functions below are public\n  export const getData = (field) => {\n    return process(data[field]);\n  };\n\n  export const addData = (field, value) => {\n    data[field] = value;\n  };"})}),(0,r.jsx)("p",{children:"In the module above only two functions are being exposed, everything else is private to the module, therefore this module can be used as following."}),(0,r.jsx)("pre",{children:(0,r.jsx)("code",{className:"language-javascript",children:"import { addData, getData } from './datastructure';\n\n  addData('key', 'myvalue');\n\n  const value = getData('key');"})}),(0,r.jsx)("p",{children:"Avoid using classes unless there\u2019s a good reason to. Consider the following example:"}),(0,r.jsx)("pre",{children:(0,r.jsx)("code",{className:"language-javascript",children:"import Module from './mymodule';\n  /* Module is a ES6 class */\n  new Module('.element-selector', {\n    /* options */\n    onEvent1: () => {},\n    onEvent2: () => {},\n  });"})}),(0,r.jsxs)("p",{children:["A good indicator that you don\u2019t need classes is when you don\u2019t need the instance of that class. For this reason our eslint config has the"," ",(0,r.jsx)("a",{href:"https://eslint.org/docs/rules/no-new",target:"_blank",rel:"noreferrer",children:"no-new"})," ","rule enabled. The code sample below provides a better alternative."]}),(0,r.jsx)("pre",{children:(0,r.jsx)("code",{className:"language-javascript",children:"// Option 1: still using classes but with a better design\n  import Module from './mymodule';\n\n  const module1 = new Module('.element-selector', {\n    /* options */\n  });\n  module1.addEventListener('onEvent1', () => {});\n  module1.addEventListener('onEvent2', () => {});\n  module1.doSomething();\n  module1.hide();"})}),(0,r.jsx)("p",{children:"The example above changes the design of the module API a bit and assumes multiple and separate instance of the module are desired. However, sometimes that might not even be necessary. If all you need is to abstract some complex logic and accept a couple of parameter, exposing a factory/init function is all you need."}),(0,r.jsx)("pre",{children:(0,r.jsx)("code",{className:"language-javascript",children:"// Option 2: not using classes\n  import module from './mymodule';\n\n  module('.element-selector', {\n    /* options */\n  });"})}),(0,r.jsx)(d.Z,{section:"3",children:"Don\u2019t Pollute the Window Object"}),(0,r.jsxs)("p",{children:["Adding methods or properties to the ",(0,r.jsx)("code",{children:"window"})," object or the global namespace should be done carefully. ",(0,r.jsx)("code",{children:"window"})," ","object pollution can result in collisions with other scripts. If you need to expose data to the rest of your application, you should first consider using some sort of state management. Sometimes however, exposing methods or properties to the"," ",(0,r.jsx)("code",{children:"window global"})," is necessary and when doing so wrap your code in closures and expose methods and properties to window with caution."]}),(0,r.jsxs)("p",{children:["When a script is not wrapped in a closure, the current context or"," ",(0,r.jsx)("code",{children:"this"})," is actually ",(0,r.jsx)("code",{children:"window"}),":"]}),(0,r.jsx)("pre",{children:(0,r.jsx)("code",{className:"language-javascript",children:"/console.log(this === window); // true\n\n  for (var i = 0; i < 9; i++) {\n    // Do stuff\n  }\n\n  const result = true;\n\n  console.log(window.result === result); // true\n  console.log(window.i === i); // true"})}),(0,r.jsx)("p",{children:"When we put our code inside a closure, our variables are private to that closure unless we expose them:"}),(0,r.jsx)("pre",{children:(0,r.jsx)("code",{className:"language-javascript",children:"(function () {\n    for (let i = 0; i < 9; i++) {\n      // Do stuff\n    }\n\n    window.result = true;\n  })();\n\n  console.log(typeof window.result !== 'undefined'); // true\n  console.log(typeof window.i !== 'undefined'); // false"})}),(0,r.jsxs)("p",{children:["Notice how ",(0,r.jsx)("code",{children:"i"})," was not exposed to the window object."]}),(0,r.jsx)(d.Z,{section:"3",children:"Secure Your Code"}),(0,r.jsxs)("p",{children:["In JavaScript, we often have to insert new elements with dynamic attributes and content into the DOM. A common way to do this is to use the ",(0,r.jsx)("code",{children:"innerHTML"})," method like so:"]}),(0,r.jsx)("pre",{children:(0,r.jsx)("code",{className:"language-javascript",children:"const someElement = document.getElementById('someElement');\n  const someUrl = 'https://someurl.com/';\n  const someContent = 'Some content';\n\n  someElement.innerHTML = `<div class=\"container\"><a href=\"${someUrl}\">${someContent}</a></div>`;"})}),(0,r.jsxs)("p",{children:["However, passing HTML strings to ",(0,r.jsx)("code",{children:"innerHTML"})," and methods like it can expose your code to"," ",(0,r.jsx)("a",{href:"https://developer.mozilla.org/en-US/docs/Glossary/Cross-site_scripting",target:"_blank",rel:"noreferrer",children:"cross-site scripting"}),", also known as XSS\u2014the most common security vulnerability in JavaScript. Because these methods evaluate strings passed to them as HTML, they can execute potentially harmful code. For instance, if"," ",(0,r.jsx)("code",{children:"someContent"})," in the above example is"," ",(0,r.jsx)("code",{children:'<img src="fakeImage" onerror="alert( \'hacked!\' )" />'}),", the JavaScript in the ",(0,r.jsx)("code",{children:"onerror"})," attribute will be executed."]}),(0,r.jsx)("p",{children:"There are several measures you can take to circumvent this XSS vulnerability:"}),(0,r.jsxs)(d.Z,{section:"4",children:["Use ",(0,r.jsx)("code",{children:"textContent"})," instead of ",(0,r.jsx)("code",{children:"innerHTML"})]}),(0,r.jsxs)("p",{children:["When setting the human-readable content of a single element, using"," ",(0,r.jsx)("code",{children:"textContent"})," is safer than using ",(0,r.jsx)("code",{children:"innerHTML"})," ","because it does not parse strings as HTML\u2014meaning any malicious code passed to it will not be executed. Refer to"," ",(0,r.jsxs)("a",{href:"https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent",target:"_blank",rel:"noreferrer",children:["MDN\u2019s documentation on ",(0,r.jsx)("code",{children:"textContent"})]})," ","for more info."]}),(0,r.jsxs)(d.Z,{section:"4",children:["Use the ",(0,r.jsx)("code",{children:"DOM"})," API to create and add elements"]}),(0,r.jsxs)("p",{children:["When you need to create multiple DOM elements, use the"," ",(0,r.jsx)("code",{children:"document.createElement"})," method to create new elements and the ",(0,r.jsx)("code",{children:"Element"})," API to set attributes and append them to the document. Creating your own elements and attributes will ensure that only those you explicitly define will make their way into the DOM."]}),(0,r.jsxs)("p",{children:["Note that appending new elements to the DOM is a relatively expensive operation, so in general you\u2019ll want to build out the structure of new elements ",(0,r.jsx)("em",{children:"before"})," adding them to the DOM, preferably within a single container element, then append them to the document all at once."]}),(0,r.jsxs)("p",{children:["Refer to MDN\u2019s documentation on"," ",(0,r.jsx)("a",{href:"https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement",target:"_blank",rel:"noreferrer",children:(0,r.jsx)("code",{children:"document.createElement"})})," ","and the"," ",(0,r.jsxs)("a",{href:"https://developer.mozilla.org/en-US/docs/Web/API/Element",target:"_blank",rel:"noreferrer",children:[(0,r.jsx)("code",{children:"Element"})," API"]})," ","for more info."]}),(0,r.jsx)(d.Z,{section:"4",children:"Sanitize HTML strings before adding to the DOM"}),(0,r.jsxs)("p",{children:["In general, using the ",(0,r.jsx)("code",{children:"Element"})," API is the preferred best practice to safely create and add DOM elements. However, it tends to result in much more verbose code compared to HTML-parsing methods like ",(0,r.jsx)("code",{children:"innerHTML"}),". This can become painful if you need to dynamically create a large number of new elements. In these cases, the convenience of methods like ",(0,r.jsx)("code",{children:"innerHTML"})," can be extremely tempting."]}),(0,r.jsxs)("p",{children:["If you need to generate a large amount of HTML dynamically, consider using a ",(0,r.jsx)("code",{children:"DOMParser"})," to parse and sanitize HTML strings before adding the HTML to the DOM with a method like"," ",(0,r.jsx)("code",{children:"innerHTML"}),". Parsing HTML strings with a"," ",(0,r.jsx)("code",{children:"DOMParser"})," will not automatically make the code any safer, but it will allow you to access the elements from the string and strip potentially unsafe tags and attributes before they have a chance to get executed. Refer to"," ",(0,r.jsxs)("a",{href:"https://developer.mozilla.org/en-US/docs/Web/API/DOMParser",children:["MDN\u2019s documentation on ",(0,r.jsx)("code",{children:"DOMParser"})]})," ","for more info."]}),(0,r.jsxs)("p",{children:["Alternatively, you may consider adding a client-side sanitization library to your project so you can strip potentially malicious code from your HTML before you add it to the DOM. Passing your HTML strings through a sanitizer can help prevent XSS attacks when using methods like ",(0,r.jsx)("code",{children:"innerHTML"}),". However, no library is perfect, so be aware that you are relying on the security of the sanitizer you choose. Also, remember to consider the effect on"," ",(0,r.jsx)("a",{href:"#performance",children:"performance"})," when deciding whether to add any large library to your project."]}),(0,r.jsx)(d.Z,{section:"2",id:"performance",showLink:!0,children:"Performance"}),(0,r.jsx)("p",{children:"Writing performant code is absolutely critical. Poorly written JavaScript can significantly slow down and even crash the browser. On mobile devices, it can prematurely drain batteries and contribute to data overages. Performance at the browser level is a major part of user experience which is part of the 10up mission statement."}),(0,r.jsxs)("p",{children:["We have a published"," ",(0,r.jsx)("a",{href:"https://www.npmjs.com/package/@entermedia-llc/eslint-config",children:".eslint"})," ","configuration that\u2019s used on Entermedia projects and should help you adhere to our coding standards."]}),(0,r.jsx)(d.Z,{section:"3",children:"Only Load Libraries You Need"}),(0,r.jsx)("p",{children:"JavaScript libraries should only be loaded on the page when needed. React + React DOM are around 650 KB together. This isn\u2019t a huge deal on a fast connection but can add up quickly in a constrained bandwidth situation when we start adding a bunch of libraries. Loading a large number of libraries also increases the chance of conflicts."}),(0,r.jsxs)("p",{children:["Not only should you only load the libraries you need, but using import statements, you should only load the ",(0,r.jsx)("em",{children:"parts"})," of the libraries you need. For example, if you\u2019re using"," ",(0,r.jsx)("a",{href:"https://lodash.com/",target:"_blank",rel:"noreferrer",children:"Lodash"}),", it can be very large to load the entire system, especially if you\u2019re not using all of it. You should always utilize import statements to target relevant parts of an external library to make sure you\u2019re loading only what you need. The code block below will illustrate this point:"]}),(0,r.jsx)("pre",{children:(0,r.jsx)("code",{className:"language-javascript",children:"import map from 'lodash/map';\n  import tail from 'lodash/tail';\n  import times from 'lodash/times';\n  import uniq from 'lodash/uniq';"})}),(0,r.jsxs)("p",{children:["This code block imports four methods from Lodash instead of the entire library."," ",(0,r.jsx)("a",{href:"https://www.blazemeter.com/blog/the-correct-way-to-import-lodash-libraries-a-benchmark",target:"_blank",rel:"noreferrer",children:"Read more about the proper way to load Lodash"}),". These imports can also be reduced to a single line, but for Lodash specifically, it\u2019s more performant to separate them."]}),(0,r.jsx)(d.Z,{section:"3",children:"Cache DOM Selections"}),(0,r.jsx)("p",{children:"It\u2019s a common JavaScript mistake to reselect something unnecessarily. For example, every time a menu button is clicked, we do not need to reselect the menu. Rather, we select the menu once and cache its selector. This applies whether you are using a library or not. For example:"}),(0,r.jsx)("p",{children:"Uncached:"}),(0,r.jsx)("pre",{children:(0,r.jsx)("code",{className:"language-javascript",children:"const hideButton = document.querySelector('.hide-button');\n\n  hideButton.addEventListener('click', () => {\n    const menu = document.getElementById('menu');\n    menu.style.display = 'none';\n  });"})}),(0,r.jsx)("p",{children:"Cached:"}),(0,r.jsx)("pre",{children:(0,r.jsx)("code",{className:"language-javascript",children:"const menu = document.getElementById('menu');\n  const hideButton = document.querySelector('.hide-button');\n\n  hideButton.addEventListener('click', () => {\n    menu.style.display = 'none';\n  });"})}),(0,r.jsxs)("p",{children:["Notice how, in cached versions, we are pulling the menu selection out of the event listener so it only happens once. The cached version is, not surprisingly, the"," ",(0,r.jsx)("a",{href:"https://jsperf.com/dom-selection-caching",target:"_blank",rel:"noreferrer",children:"fastest way to handle this situation"}),"."]}),(0,r.jsx)(d.Z,{section:"3",children:"Event Delegation"}),(0,r.jsx)("p",{children:"Event delegation is the act of adding one event listener to a parent node to listen for events bubbling up from its children. This is much more performant than adding one event listener for each child element. Here is an example:"}),(0,r.jsx)("pre",{children:(0,r.jsx)("code",{className:"language-javascript",children:"document.getElementById('menu').addEventListener('click', (event) => {\n    const { currentTarget } = event;\n    let { target } = event;\n\n    if (currentTarget && target) {\n      if (target.nodeName === 'LI') {\n        // Do stuff with target!\n      } else {\n        while (currentTarget.contains(target)) {\n          // Do stuff with a parent.\n          target = target.parentNode;\n        }\n      }\n    }\n  });"})}),(0,r.jsxs)("p",{children:["You may be wondering why we don\u2019t just add one listener to the"," ",(0,r.jsx)("code",{children:"<body>"})," for all our events. Well, we want the event to ",(0,r.jsx)("em",{children:"bubble up the DOM as little as possible"})," for"," ",(0,r.jsx)("a",{href:"https://jsperf.com/event-delegation-distance",target:"_blank",rel:"noreferrer",children:"performance reasons"}),". This would also be pretty messy code to write."]}),(0,r.jsx)(d.Z,{section:"3",children:"Debounce, Throttle, and requestAnimationFrame"}),(0,r.jsx)("p",{children:"Browser events such as scrolling, resizing, and cursor movements happen as fast as possible and can cause performance issues. By debouncing, throttling, or using requestAnimationFrame on our functions, we can increase performance by controlling the rate at which an event listener calls them."}),(0,r.jsx)(d.Z,{section:"4",children:"Debouncing"}),(0,r.jsx)("p",{children:"Debouncing a function will prevent it from being called again until a defined amount of time has passed, i.e., execute this function if 200ms has passed since it was last called. A common use case would be when resizing a browser window; we can apply classes or move elements after the resize has happened."}),(0,r.jsx)(d.Z,{section:"4",children:"Throttling"}),(0,r.jsx)("p",{children:"Throttling a function will cause it to only be called a maximum number of times over a defined period of time, i.e., only execute this function once every 50ms. A common use case would be when scrolling a browser window; we may want an element to show up as we scroll down the page, but killing performance by checking the scroll position constantly isn\u2019t necessary. Debouncing wouldn\u2019t work in this example because we don\u2019t want to wait for the user to stop scrolling."}),(0,r.jsx)(d.Z,{section:"4",children:"requestAnimationFrame"}),(0,r.jsx)("p",{children:"requestAnimationFrame is similar to throttling, but it\u2019s a browser native API and tries to always throttle to 60fps. Its very name helps us know when it\u2019s best to use: while animating things. This would be the case when our JavaScript function is updating element positions, sizes, or anything else that\u2019s \u201cpainting\u201d to the screen."}),(0,r.jsxs)("p",{children:["Note that some of our recommended utility libraries already provide these functions, such as Underscore\u2019s"," ",(0,r.jsx)("a",{href:"https://underscorejs.org/#debounce",target:"_blank",rel:"noreferrer",children:"debounce"})," ","and"," ",(0,r.jsx)("a",{href:"https://underscorejs.org/#throttle",target:"_blank",rel:"noreferrer",children:"throttle"})," ","and Lodash\u2019s"," ",(0,r.jsx)("a",{href:"https://lodash.com/docs/4.17.11#debounce",target:"_blank",rel:"noreferrer",children:"debounce"})," ","and"," ",(0,r.jsx)("a",{href:"https://lodash.com/docs/4.17.11#throttle",target:"_blank",rel:"noreferrer",children:"throttle"}),"."]}),(0,r.jsxs)("p",{children:["For more information and examples of debouncing, throttling, and requestAnimationFrame, see"," ",(0,r.jsx)("a",{href:"https://css-tricks.com/debouncing-throttling-explained-examples/",target:"_blank",rel:"noreferrer",children:"Debouncing and Throttling Explained Through Examples"}),","," ",(0,r.jsxs)("a",{href:"https://css-tricks.com/the-difference-between-throttling-and-debouncing/",target:"_blank",rel:"noreferrer",children:["The Difference Between Throttling and Debouncing"," "]}),", and"," ",(0,r.jsx)("a",{href:"https://davidwalsh.name/javascript-debounce-function",target:"_blank",rel:"noreferrer",children:"JavaScript Debounce Function"}),"."]}),(0,r.jsx)(d.Z,{section:"2",id:"client-side-data",showLink:!0,children:"Client-side Data"}),(0,r.jsx)("p",{children:"When dealing with client-side data requests (Ajax calls), there are a lot of different methods to consider. This portion of the document will walk you through various situations and talk about the different technologies and patterns you may encounter along the way."}),(0,r.jsx)(d.Z,{section:"3",children:"Using Fetch and Promises for Modern Environments"}),(0,r.jsxs)("p",{children:["The Fetch API is a modern replacement for the XMLHttpRequest. It is"," ",(0,r.jsx)("a",{href:"https://caniuse.com/#search=fetch",target:"_blank",rel:"noreferrer",children:"generally well supported"}),", having features present in all evergreen browsers (browsers that auto-update). Fetch is recommended to be used in all modern environments when making Ajax calls or dealing with client-side data requests. Visit the"," ",(0,r.jsx)("a",{href:"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API",target:"_blank",rel:"noreferrer",children:"MDN Fetch documentation"})," ","for a basic example of how to use this API."]}),(0,r.jsxs)("p",{children:["To properly use fetch, support for Promises also needs to be present (Promises and Fetch have the same"," ",(0,r.jsx)("a",{href:"https://caniuse.com/#search=promise",target:"_blank",rel:"noreferrer",children:"browser support"}),"). The support requirement for both is an important distinction when your project needs to support non-evergreen browsers (IE 11 and under), because both APIs will need to be polyfilled to get Fetch working."]}),(0,r.jsxs)("p",{children:["To polyfill with NPM, we recommend adding the following packages to your dependencies:"," ",(0,r.jsx)("a",{href:"https://www.npmjs.com/package/promise-polyfill",target:"_blank",rel:"noreferrer",children:"promise-polyfill"})," ","and"," ",(0,r.jsx)("a",{href:"https://www.npmjs.com/package/whatwg-fetch",target:"_blank",rel:"noreferrer",children:"whatwg-fetch"}),". They are both applicable at different points in the build process. Promises are polyfilled at the file-level with an import and fetch is polyfilled at the build level in your task runner. Please see the"," ",(0,r.jsx)("a",{href:"https://www.npmjs.com/package/whatwg-fetch",target:"_blank",rel:"noreferrer",children:"official whatwg-fetch documentation"})," ","for detailed installation instructions."]}),(0,r.jsxs)("p",{children:["If you are unable to process the polyfills in a modern workflow, the files can also be downloaded and enqueued separately (",(0,r.jsx)("a",{href:"https://cdnjs.com/libraries/fetch",target:"_blank",rel:"noreferrer",children:"fetch"}),","," ",(0,r.jsx)("a",{href:"https://cdn.jsdelivr.net/npm/promise-polyfill@8/",target:"_blank",rel:"noreferrer",children:"promise"}),"), but if possible, they should be implemented at the build level."]}),(0,r.jsx)(d.Z,{section:"3",children:"Using A Normal Ajax Call for Older Environments"}),(0,r.jsxs)("p",{children:["For various reasons on a project, you may not be able to use a modern technique for dealing with client-side data requests. If you find yourself in that situation, it usually isn\u2019t necessary to load an entire library like jQuery for a single feature. If you find yourself in this situation try writing a vanilla ajax call instead. Basic ajax calls do not require any pollyfills or fallbacks, with the exception of providing support on very old browsers like, Internet Explorer 6. You can reference the"," ",(0,r.jsx)("a",{href:"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#Browser_compatibility",target:"_blank",rel:"noreferrer",children:"XMLHttpRequest Browser Compatibility table"})," ","on MDN for specific feature support."]}),(0,r.jsxs)("p",{children:["Please see the"," ",(0,r.jsx)("a",{href:"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest",target:"_blank",rel:"noreferrer",children:"MDN XMLHttpRequest documentation"})," ","for an example of a basic Ajax call."]}),(0,r.jsx)(d.Z,{section:"3",children:"When to Use a Client-side Data Request Library"}),(0,r.jsx)("p",{children:"Sometimes a project may require a more robust solution for managing your requests, especially if you will be making many requests to various endpoints. While Fetch can do most (and someday all) of the things we need, there may be a few areas where it could fall short in your project. A few main items where Fetch may fall short:"}),(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Cancelable requests"}),(0,r.jsx)("li",{children:"Timeout requests"}),(0,r.jsx)("li",{children:"Request progress"})]}),(0,r.jsxs)("p",{children:["It should be noted that these are in"," ",(0,r.jsx)("a",{href:"https://github.com/github/fetch#aborting-requests",target:"_blank",rel:"noreferrer",children:"active development"})," ","and timeout requests can also be handled by using a"," ",(0,r.jsx)("a",{href:"https://davidwalsh.name/fetch-timeout",target:"_blank",rel:"noreferrer",children:"wrapper function"}),"."]}),(0,r.jsxs)("p",{children:["Certain libraries have these built in already and are still promised-based, but can also come with a few other advantages that Fetch doesn\u2019t have like:"," ",(0,r.jsx)("a",{href:"https://github.com/axios/axios",target:"_blank",rel:"noreferrer",children:"transformers"}),","," ",(0,r.jsx)("a",{href:"https://github.com/axios/axios",target:"_blank",rel:"noreferrer",children:"interceptors"}),", and built-in"," ",(0,r.jsx)("a",{href:"https://en.wikipedia.org/wiki/Cross-site_request_forgery",target:"_blank",rel:"noreferrer",children:"XSRF protection"}),". If you find yourself needing these features that are outside the scope of native JavaScript you may want to evaluate the benefit of using a library."]}),(0,r.jsxs)("p",{children:["If you plan on making many requests over the lifetime of the application and you don\u2019t need the features listed above, you should consider making a"," ",(0,r.jsx)("a",{href:"https://medium.com/@shahata/why-i-wont-be-using-fetch-api-in-my-apps-6900e6c6fe78",target:"_blank",rel:"noreferrer",children:"helper function or module"})," ","that will handle all of your application\u2019s Fetch calls so you can easily include things like: expected error handling, a common URL base, any cookies you may need, any mode changes like CORS, etc.. Overall, you should be able to accomplish what you need to with Fetch in the majority of cases."]}),(0,r.jsx)("p",{children:"Certain codebases may already have such libraries in place. Many legacy projects use jQuery.ajax() to make their requests. If possible, attempt to phase out jQuery for a vanilla solution where appropriate. In many cases, replacing with Fetch or XMLHttpRequest will be possible."}),(0,r.jsx)(d.Z,{section:"3",children:"Concatenating Requests"}),(0,r.jsx)("p",{children:"When constructing a page that contains a lot of client-side data requests you will want to consider concatenating your requests into a single Ajax call. This will help you avoid piling up requests or sending them through callbacks and nested promises when parts of the data depend on other parts."}),(0,r.jsx)(d.Z,{section:"4",children:"GraphQL"}),(0,r.jsxs)("p",{children:[(0,r.jsx)("a",{href:"https://graphql.org/",target:"_blank",rel:"noreferrer",children:"GraphQL"})," ","is an open source data query and manipulation language. It provides an alternative to REST because it allows for a consistent way to make declarative queries. We first define the data structure(s) we need, then request the data, and return only the data that was requested. This creates an environment of smaller, more targeted calls to an API. It also allows us to concatenate multiple calls into single data requests, reducing the overhead and time to load."]}),(0,r.jsxs)("p",{children:["An essential part of a GraphQL API is an API schema. GraphQL requires a human-readable schema which describes the types which are available, and how they relate to one another. While writing a schema is reasonably straightforward, utilizing the standardized nature of WordPress\u2019s database could save time. It may well be possible to reuse a schema from other projects, such as generated by a plugin like,"," ",(0,r.jsx)("a",{href:"https://github.com/wp-graphql/wp-graphql",target:"_blank",rel:"noreferrer",children:"WPGraphQL"}),"."]}),(0,r.jsx)(d.Z,{section:"2",id:"testing",showLink:!0,children:"Unit and Integration Testing"}),(0,r.jsx)("p",{children:"At Entermedia, we generally employ unit and integration tests only when building applications that are meant to be distributed. Writing tests for client themes usually does not offer a huge amount of value (there are of course exceptions to this). When writing tests, it\u2019s important to use the framework that best fits the situation and make sure it is well documented for future engineers coming onto the project."}),(0,r.jsx)(d.Z,{section:"2",id:"libraries",showLink:!0,children:"Libraries"}),(0,r.jsx)("p",{children:"With the influx of JavaScript upgrades in recent years, the need for a third-party library to polyfill functionality is becoming more and more rare (outside of a build script). Don\u2019t load in extensions unless the benefit outweighs the size of and added load-time of using it. While it is often more efficient for coding to use a quick jQuery method, it is rarely worth bringing in an entire library for one-off instances."}),(0,r.jsx)("p",{children:"If you are working on a legacy project that already contains a library, make sure you\u2019re still evaluating the need for it as you build out features to best set up clients for the future."}),(0,r.jsx)("p",{children:"There are many JavaScript libraries available today. Many of them directly compete with each other. We try to stay consistent with what WordPress uses. The following is a list of primary libraries used by Entermedia."}),(0,r.jsx)(d.Z,{section:"3",children:"Components"}),(0,r.jsx)("p",{children:"WP Component Library (coming soon) - Provides us with a vetted, accessible, and standardized collection of UI component and Schema snippets we can use on projects."}),(0,r.jsx)(d.Z,{section:"3",children:"Utility"}),(0,r.jsxs)("p",{children:[(0,r.jsx)("a",{href:"http://underscorejs.org",target:"_blank",rel:"noreferrer",children:"Underscore"})," ","- Provides a number of useful utility functions such as"," ",(0,r.jsx)("code",{children:"clone()"}),", ",(0,r.jsx)("code",{children:"each()"}),", and ",(0,r.jsx)("code",{children:"extend()"}),". WordPress core uses this library quite a bit."]}),(0,r.jsx)(d.Z,{section:"3",children:"Frameworks"}),(0,r.jsxs)("p",{children:[(0,r.jsx)("a",{href:"https://reactjs.org/",target:"_blank",rel:"noreferrer",children:"React"})," ","- Using React provides a library to create large-scale, stateful JavaScript applications. It aims to provide a flexible system of creating highly componentized user interfaces."," ",(0,r.jsx)(l.default,{href:"js/react",children:"Learn more about how we use React"}),"."]}),(0,r.jsxs)("p",{children:[(0,r.jsx)("a",{href:"https://vuejs.org/",target:"_blank",rel:"noreferrer",children:"Vue"})," ","- Implementing Vue on a project allows us to take advantage of the statefulness built into something like React, but apply it on a much more lightweight and smaller scale as to not bog down performance by loading in a heavy library."," ",(0,r.jsx)(l.default,{href:"js/vue",children:"Learn more about how we use Vue"}),"."]}),(0,r.jsx)(d.Z,{section:"2",id:"refresher",showLink:!0,children:"Code Reference/Refresher"}),(0,r.jsx)(d.Z,{section:"3",children:"Working with Arrays"}),(0,r.jsx)(d.Z,{section:"4",children:"Which Array Method to Use?"}),(0,r.jsx)(a.default,{src:"/images/array-methods.jpg",width:820,height:461,alt:"Which array method to use?",loader:o.Z})]})})]})}n(9980)},2390:function(e){e.exports={container:"layout_container__4V7Vd","error-text":"layout_error-text__3ebrN","success-text":"layout_success-text__ra67B"}}},function(e){e.O(0,[662,247,521,607,774,888,179],(function(){return t=1013,e(e.s=t);var t}));var t=e.O();_N_E=t}]);