[[{"l":"Entermedia Developer Documentation","p":["At Entermedia, our developers are not geared to teach anyone to become an engineer. Rather, they aim to illustrate how to engineer the Entermedia way. Therefore, these best practices are intended for capable engineers."]},{"l":"Our Goal","p":["As a company, we strive to provide websites and components that yield a top-notch user experience. In order to improve efficiency, we need to standardize what we use and how we use it. Standardizing our tools, frameworks, libraries, style, version control, and even languages will allow us to better understand the inner workings of someone else's project and produce better solutions ourselves.","As such, Entermedia engineers should follow these best practices in all their work. Our best practices are not meant to be restrictive or comprehensive; we value creativity at Entermedia. The aim is for this document to provide a strong guidance, not an authoritative direction. It's our hope that these best practices will not only influence Entermediaites but community members as well.","We make web publishing easy. Maybe even fun.","At the very heart of Entermedia is the publishing or user experience. Starting with a proven, open-source platform like WordPress or Drupal, we firmly believe, is the best starting point to achieve this. We design and build custom publishing experiences for major companies and brands around the world. Our publishing experiences or websites are tailor-made for our clients and their specific needs.","As such, the content management experience cannot be made to be generic. We don't cut corners when it comes to user experience and interface. We don't take shortcuts that compromise the end experience for the user. We don't distribute pre-packaged, auto-generated user interfaces or components.","Keep it simple.","While our solutions are complex, we want our code, tools, processes, systems, and practices to be as simple as possible. Simplicity facilitates collaboration as there is a lower barrier of entry. This goes for things like PHP design patterns as well as workflow. We discourage practices such as writing extra levels of code abstraction (wrapping existing API's) as they complicate debugging and add another component that needs to be maintained.","We are always learning.","We are constantly challenging ourselves and learning. Knowledge gives us a competitive edge. Everyone around us is growing; if we stop growing individually or collectively and stop challenging ourselves to improve, we fall behind. For that reason, this document is not set in stone and will change. Evolving these best practices through contributions is incredibly important to us."]},{"l":"Contributing","p":["Please contribute via pull requests on GitHub."]}],[{"l":"Coding Standards","p":["At Entermedia, we aim to create the best possible experience for both our clients and their customers; not for the sake of using cool, bleeding edge technologies that may not have widespread browser support. Our markup embodies this approach.","Markup is intended to define the structure and outline of a document and to offer semantic structure for the document's contents. Markup should not define the look and feel of the content on the page beyond the most basic structural concepts such as headers, paragraphs, and lists.","At Entermedia, we employ progressive enhancement to ensure that the sites we build for our clients are accessible to as many users as possible.","Progressive enhancement means building a website that is robust, fault tolerant, and accessible. Progressive enhancement begins with a baseline experience and builds out from there, adding features for browsers that support them. It does not require us to select supported browsers or revert to table-based layouts. Baselines for browser and device support are set on a project-by-project basis."]},{"l":"Avoid Cookies","p":["Safari browser’s Intelligent Tracking Prevention (ITP) 2.1 sets the expiration period at 7 days for all first-party cookies set by in-line (or tag management solution injected) vendor JavaScript libraries like Google Analytics’ analytics.js.","Authentication cookies (secure and HTTP-only) which have been properly implemented won’t be affected by the 7-day cap. These cookies should be deployed using the Set-Cookie header in the HTTP response and inaccessible via JavaScript’s document.cookie API.","Solutions for other types of cookies include:","Using localStorage to persist the unique identifier (i.e. the client ID) instead of relying solely on the _ga cookie","Setting the _ga cookie with the HTTP response, rather than with JavaScript Keep in mind that these solutions come with caveats: using localStorage only works on the same domain and would not work for cross-domain tracking.","As an alternative to local storage, server-side tracking via the proxy layer in Cloudflare is probably the best option for clients with significant traffic from Safari."]}],[{"l":"Accessibility","p":["At a minimum, all Entermedia projects should pass WCAG 2.1 Level A Standards. A baseline compliance goal of Level A is due to WCAG guideline 1.4.3 which requires a minimum contrast ratio on text and images, as Entermedia does not always control the design of a project.","For design projects and projects with a global marketplace (companies with entities outside the US), Level AA should be the baseline goal. The accessibility level is elevated for global markets to properly comply with EU Functional Accessibility Requirements, which aligns closely with WCAG 2.0 Level AA. Having direct access to the designer also allows for greater accessibility standards to be achieved.","While Section 508 is the US standard, following the guidance of WCAG 2.0 will help a project pass Section 508 and also maintain a consistent internal standard. If a project specifically requires Section 508, additional confirmation testing can be done."]},{"l":"States and Properties","p":["ARIA also allows us to describe certain inherent properties of elements, as well as their various states. Imagine you've designed a site where the main content area is split into three tabs. When the user first visits the site, the first tab will be the primary one, but how does a screen reader get to the second tab? How does it know which tab is active? How does it know which element is a tab in the first place?","ARIA attributes can be added dynamically with JavaScript to help add context to your content. Thinking about the tabbed content example, it might look something like this:","You can see how effortless it is to make our tabbed interface accessible to screen readers. Be sure to add visibility attributes like aria-hidden with JavaScript. If it is added manually in HTML and JavaScript doesn't load, the content will be completely removed from screen readers."]},{"l":"Accessible Forms","p":["Forms are one of the biggest challenges when it comes to accessibility. Fortunately, there are a few key things that we can do to ensure they meet accessibility standards:","Each form field should have its own label. The label element, along with the for attribute, can help explicitly associate a label to a form element adding readability for screen readers and assistive technology.","Form elements should also be logically grouped using the fieldset element. Grouped form elements can be helpful for users who depend on screen readers or those with cognitive disabilities.","Finally, we should ensure that all interactive elements are keyboard navigable, providing easy use for people with vision or mobility disabilities (or those not able to use a mouse). In general, the tab order should be dictated by a logical source order of elements. If you feel the need to change the tab order of certain elements, it likely indicates that you should rework the markup to flow in a logical order or have a conversation with the designer about updates that can be made to the layout to improve accessibility."]},{"l":"Bypass Blocks","p":["Bypass blocks are HTML flags within a document that allow users that rely on screen readers, keyboard navigation or other assistive technologies to bypass certain page elements or skip to a specific section of a page with ease. They most often manifest themselves in the form of skip links and ARIA landmark roles."]},{"l":"Skip Links","p":["Skip links are ideally placed immediately inside of the body tag so that they are discovered and announced as early as possible.","While these links are often used to skip to a page's main content section they can link to different sections of the page if necessary and several links can be added if multiple areas of interest are in the page.","An example of what a skip link might look like:","Skip links make use of CSS to hide them from sighted users while keeping them accessible for screen readers. Usually the styles are attached to a screen-reader-text class of some kind. This CSS is used to position the links off the screen then use :focus styles to make the link visible for sighted keyboard users.","Due to some browsers not moving keyboard focus when they move visual focus, it is essential to also enhance this feature with JavaScript. The popular Underscores starter theme came bundled with a good option that can be used as a starting point if you need to support browsers with this issue."]},{"l":"ARIA Landmark Roles","p":["ARIA is a descriptive layer on top of HTML to be used by screen readers. It has no effect on how elements are displayed or behave in browsers. We use these ARIA Landmark Roles (banner, navigation, main, etc.) to provide a better experience to users with disabilities. Landmark role are another type of bypass block. Screen readers can see these as major document regions and navigate to them directly without having to parse through all the content in between.","Landmark roles should be used with skip links (not instead of), so we can be sure and offer support for older assistive technology platforms that may not yet support the specification."]},{"l":"Media","p":["If accessibility starts with HTML, media is how we make it come alive. Creating accessible media is not only the responsibility of an editorial team, but it is our responsibility as engineers to ensure the systems we put in place promote and support the creation of accessible media. It can generally be put into three buckets: images, audio, and video. When looking for direction in these areas we turn to the rules laid out by the Web Content Accessibility Guidelines (WCAG).","To read more about any of the guidelines outlined in this section, please visit the WCAG quickref document. Some of the more aggressive guidelines in Level AAA are not mentioned here. Be sure to check with your project lead about the accessibility compliance level you need to follow."]},{"l":"Images","p":["Images are the most common for of media we encounter in our day to day work. WCAG guidelines pertaining to images are: 1.1.1 Non-text content and 1.4.4 Images of text. Following these two rules will ensure that our images always have alternative text and any time text is represented in an image there is always a purely text-based version of it available for users of assistive technology."]},{"i":"audio--video","l":"Audio & Video","p":["Between audio and video, we certainly deal with video more often, but there are some WCAG guidelines that encompass both, such as: 1.2.2 Audio/Video-only and 1.2.3 Audio Descriptions or Media Alternative. Both these guidelines address the creation of text-based versions of the media being presented to a user. This typically comes in the form of an audio track on a video, or a transcript outputted on the page somewhere. As an aside, outputting a transcript will help the content get indexed by search engines, rather than just having the content inside a media element (audio/video)."]},{"l":"Audio","p":["Audio is an important part of the work we do; making that content accessible to all users is extremely valuable. Guideline 1.4.1 Audio Control is related to autoplaying audio. The general rule is: don't autoplay audio. However, if you do, and that audio is playing for more than three seconds 1.4.1 states that either a mechanism must be available to pause or stop the audio, or a mechanism must be available to control audio volume independently from the overall system volume level. This is important for any user with and auditory disorder."]},{"l":"Video","p":["When putting video on the Web (that contains dialog), guideline 1.2.2 states that captions must be present, without exception. While we can't always control the content that's placed on a site, we can be sure to guide clients towards a situation for compliance but suggesting transcription services. Other than alternative text, dealing with captions is the most common media accessibility issue you'll likely have to deal with."]},{"l":"Testing"},{"l":"Automated Testing","p":["In most cases, maintaining baseline accessibility requirements for a project can be an automated process. While we can't test everything, and we still need some manual testing, there are certain tools that allow us to keep our finger on the pulse of a project's accessibility compliance.","Automating accessibility tests is easy with a tool like pa11y, which is a command line tool that runs HTML Code Sniffer over a URL.","It is easily installed through npm: npm install pa11y --save-dev and can be added into a package.json file as a separate npm script as to not collide with other build processes that may be running on a project:","Running this process allows the engineer to be alerted if a code-level or design change violates the project's accessibility standards."]},{"l":"Manual Testing","p":["Automated testing will often only get you so far; that is why we also recommend getting a human's eye on the accessibility in a project and executing manual tests alongside any automation. This process is largely done by an engineer reviewing the interface in a browser or screen reader and involves running your project through all of the WCAG guidelines at the compliance level that is applicable to your specific project (A, AA, or AAA). The WCAG Quickref is a great place to see all these guidelines in one place. Internally, we also have a spreadsheet template to help manage this process.","Manual accessibility testing should be run in conjunction with automated testing to help identify all the potential areas of improvement on a project as well as resolve false-positives that may appear during the automated testing process. Tests should be run on a reasonable sample size of templates to help produce the most comprehensive analysis possible - preferably the same templates used in the automated testing process.","Combining automated and manual testing practices allows Entermedia to maintain a high level of compliance on all projects and it is critical to the work we do."]}],[{"l":"Markup"},{"l":"Semantic Markup","p":["At Entermedia, we pride ourselves in writing clean, semantic markup. Semantic markup can be defined as: “the use of HTML markup to reinforce the semantics, or meaning, of the information in web pages rather than merely to define it's presentation or look. Semantic HTML is processed by traditional web browsers as well as by many other user agents. CSS is used to suggest its presentation to human users” (definition from Wikipedia - https://en.wikipedia.org/wiki/Semantic_HTML).","Semantic elements are elements with clearly defined meaning to both the browser and the developer. Elements like header, nav, footer, or article do a much better job of explaining the content that is contained within the element than span or div. This does not mean that we do not use div s in our markup, only that we prefer the right tool (or in this case semantic element) for the job."]},{"i":"minimal--valid","l":"Minimal & Valid","p":["Websites should be written using the least amount of markup that accomplishes the goal. In the interest of engineering maintainable projects, it's imperative that two completely different types of readers are accounted for: humans and browsers. Writing minimal markup makes it easier for developers to read and understand in a code editor. Valid markup is easier for browsers to process.","We test our markup against the W3C validator to ensure that it is well formed and provides a fairly consistent experience across browsers."]},{"l":"Optimize Readability","p":["At Entermedia, we often work with large codebases. As such, it's important to optimize markup for human readability. This allows developers to quickly rotate in and out of projects, eases onboarding processes, and improves code maintainability.","Always use tabs for indentation. Doing this allows developers to set their editor preferences for tab width.","When mixing PHP and HTML together, indent PHP blocks to match the surrounding HTML code. Closing PHP blocks should match the same indentation level as the opening block. Similarly, keep PHP blocks to a minimum inside markup. Doing this turns the PHP blocks into a type of tag themselves. Use colon syntax for PHP loops and conditionals so that it's easier to see when a certain loop ends within the block of markup.","Examples:"]},{"l":"Avoid Unnecessary Presentational Markup","p":["As part of our mission to write clean, semantic markup, avoid writing unnecessary presentational markup. Markup should always dictate what the content is, and CSS should dictate how the content looks. Mixing these two concerns makes maintaining code more difficult.","This is not to say that multiple classes on an element are unacceptable. Contextual modifier classes are certainly acceptable and encouraged."]},{"i":"schemaorg-markup","l":"Schema.org Markup","p":["Schema.org is the result of collaboration between Google, Bing, Yandex, and Yahoo! to provide the information their search engines need to understand content and provide the best search results possible. Adding Schema.org data to your HTML provides search engines with structured data they can use to improve the way pages display in search results.","For example, if you've ever searched for a restaurant and found that it had star reviews in its search results, this is a product of Schema.org and rich snippets.","Schema.org data is intended to tell the search engines what your data means, not just what it says.","To this end, we use Schema.org data where relevant and reasonable to ensure that our clients have the best search visibility that we can provide.","Schema.org data can be provided in two forms: “microdata” markup added to a page's structure or a JSON-LD format. Google prefers developers adopt JSON-LD, which isolates the data provided for search engines from the markup meant for user agents. Even though the JSON-LD spec allows linking to data in an external file, search engines currently only parse JSON-LD data when it appears within a script type=application/ld+json tag.","Schema.org markup should be validated against the Google Structured Data Testing Tool."]},{"i":"classes--ids","l":"Classes & IDs","p":["In order to create more maintainable projects, developers should use classes for CSS and IDs for JavaScript. Separating concerns allows markup to be more flexible without risking breaking both styles and any JavaScript that may be attached to the element on which someone is working.","When using JavaScript to target specific elements in your markup, prefix the ID of the element that is being targeted with js-. This indicates the element is being targeted by JavaScript for your future self as well as other developers that may work on the project."]},{"l":"Feature Detection and Polyfills"},{"l":"Polyfills","p":["When writing markup that does not have wide browser support, using polyfills can help bring that functionality to those older browsers. Providing support for older browsers is incredibly important to the business objectives of our clients. In an effort to prevent code bloat, we only provide polyfills for features that are functionally critical to a site."]},{"l":"Feature Detection","p":["At Entermedia, the concept of feature detection is used to test browser support for new features that do not yet have full support across the board. The concept of feature detection is to test if a feature is supported by the browser and if not supported, conditionality run code to provide a similar experience with browsers that do support the feature. While popular feature detection libraries exist, there are feature detection techniques for JavaScript and @supports at-rule for CSS that can be utilized."]}],[{"l":"Performance"},{"l":"Images and Media","p":["Images should be optimized for Next-Gen formats. JPEG 2000, JPEG XR, and WebP are image formats that have superior compression and quality characteristics compared to their older JPEG and PNG counterparts.","Crop images appropriately, you do not need to create a crop for every size but in some cases a few extra crops to handle mobile proportions can be useful.","Images should be served using srcset so that smaller sizes can be shown for smaller viewports.","All images implemented through code should contain a width and height attribute. This is especially important in avoiding Content Layout Shift issues.","Assets, in particular images, should be served through a CDN.","Images, Videos and iFrames should be lazy loaded. Please note that WordPress will handle browser level lazy loading using native lazy load. In order for this to take effect, the width and height should be set on the tag.","If you’re not seeing performance benefits by lazy-loading IFrames, look into using the Facade Pattern","Hosting videos directly should be avoided and can be problematic at scale. Entermedia recommends a dedicated hosting service such as Brightcove, Vimeo, YouTube, Dailymotion, etc."]},{"l":"Fonts","p":["Fonts used across the site should be preloaded.","Whenever available, WOFF2 font formats should be used for better compression with a WOFF fallback.","Subset Font files if you have them available locally.","Investigate using unicode-range to subset fonts if they are being served locally or through Google Fonts.","Fonts should either be served locally or from a single foundry (don’t mix Google fonts and TypeKit, pick one)."]},{"l":"JavaScript and CSS","p":["Write JavaScript and CSS with the “Mobile First” approach in mind.","Where viable, ensure that JavaScript and CSS assets are not render-blocking the browser pipeline. This is mainly achieved by deferring or setting scripts to load asynchronously while other assets are loading.","All JavaScript and CSS should be minified.","Standalone site features should be broken off into isolated entry points so we don’t have to load more CSS/JS on pages that will never use it.","Be aware of any additional requests 3rd-party libraries are making on page load. This can severely impact performance scores.","Where possible, defer loading of libraries that are not necessary for a stable user experience until after initial load.","Critical rendering path should be considered. Scripts should be loaded in the footer and external scripts should contain the ‘async’ attribute or be loaded at the bottom of the document where they can’t be concatenated into a single file. Internal scripts without an implicit loading order should contain the ‘defer’ attribute if possible. Note that scripts using the ‘defer’ attribute can be loaded in the head tag as they will be fetched asynchronously while being executed after the HTML is parsed."]},{"l":"Design and UX","p":["As part of design reviews, engineering teams should provide feedback on the following:","Avoid using large media objects for decorative purposes if no business value is present. If large media objects are used, consider only loading them on larger screen sizes.","Avoid structural page changes based on the browser width as they require extra scripting and can slow performance.","Err on the side of typefaces that offer WOFF2 font files, as they are quicker to load.","Avoid auto playing videos, particularly above the fold and on mobile screens."]},{"l":"Advertising","p":["All ads should be lazy loaded.","Keep ads above the fold to a minimum."]},{"l":"Systems","p":["Use HTTP/2 enabled hosting whenever possible.","GZIP compression should be active."]},{"l":"Third Party Plugins and Scripts","p":["Third party plugins can play a part in poor site performance. Always audit a plugin for performance issues before adding it to a project. Paying careful attention to the server side impacts of slow non-cached queries and how data is being stored to the weight of the JavaScript and CSS being included on every page.","Third party scripts, particularly those being loaded for the purpose of analytics, embeds, helper libraries and advertising can have a major impact on site performance. Oftentimes, these scripts may be loaded through Google Tag Manager rather than directly in the page using script tags making it difficult to anticipate the impact on a project. Ensure that site performance is being tested ahead of any launch with all third party scripts loaded. If any scripts result in a negative impact on performance, ensure to flag this with your team.","When starting a new project or inheriting an existing one, take before screenshots of the Google PSI report so performance can be compared before-and-after."]},{"l":"Core Web Vitals","p":["Web Vitals, a performance initiative by Google, provides us a set of rules, concepts and metrics in order to serve users with the best web experience possible. Performance measuring in the past has often landed in the domain of engineers. However with the introduction of Web Vitals, site owners can now gain an understanding of the performance impacts and shortcomings of their sites without a deep understanding of web technologies. Web Vitals aim to simplify understanding and provide pertinent guidance to site owners and engineers alike in order to optimize user experience.","At Entermedia, we closely monitor Core Web Vitals(a subset of Web Vitals) during development which was introduced in June 2021 into Google’s ranking algorithm. Ensuring healthy Web Vitals throughout the build and/or maintenance is of paramount importance and requires a shift not only in how we go about building components, but in maintaining a high level of quality across overall user experience."]},{"l":"Cross Discipline Approach","p":["At Entermedia we acknowledge that achieving healthy Web Vitals across the board is not siloed to one discipline. Ensuring healthy Web Vitals requires a cross discipline approach spanning Front-end Engineering, Web Engineering, Systems, Audience and Revenue and Visual Design.","As defined by Google, the 3 Core Web Vitals are currently:","Largest Contentful Paint (a.k.a. LCP)","Cumulative Layout Shift (a.k.a. CLS)","First Input Delay (a.k.a. FIP)"]},{"l":"Largest Contentful Paint","p":["Largest Contentful Paint is an important metric for measuring perceived user performance, specifically loading performance. This metric reports the render time of the largest element on the page that is visible to the user.","An LCP score of 2.5 seconds or less is considered to be a conducive measurement for good user experience.","LCP is measured in seconds (s) and can be tracked against the following DOM elements:","img","image- inside an SVG","video","An element with a background-image","Any element that is considered to be block-level ( display: block)"]},{"l":"How to diagnose Largest Contentful Paint","p":["The quickest way to diagnose the Largest Contentful Paint element on the page is by following these steps:","Open Google Chrome","Open Chrome DevTools","Select the Performance Tab","Check the Web Vitals checkbox","Click the Reload button or hit ⌘ ⇧ E shortcut","Scroll down to Timings","Select the green LCP marker","In Summary scroll down to “Related Node”","Click the node listed and it will be highlighted in the DOM."]},{"l":"How to fix Largest Contentful Paint","p":["Check with Systems or Web Engineering that the server is utilizing compression algorithms like Gzip or Brotli.","Ensure that scripts and styles are carefully audited to ensure that there are no render-blocking patterns in order to improve First Contentful Paint, which will consequently improve Largest Contentful Paint.","Ensure that there is a well-thought out caching strategy in place.","Ensure that your CSS bundles are minified and deferred if the CSS rules do not apply above the fold. You can also use Chrome’s “Coverage” tab to identify just how much of your CSS bundle is being utilized on the page.","Ensure that your JS bundles are minified, compressed and if the functionality is not required above-the-fold, lazy-loaded.","For images that find themselves in Hero components, preload the image resource ahead of time. For responsive images you will need to add the imagesrcset and imagesizes attributes: link rel=preload as=image imagesrcset= image-400.jpg 400w, image-800.jpg 800w, image-1600.jpg 1600w imagesizes=100vw /.","Here are some high-level guidelines for ensuring Largest Contentful Paint occurs as fast as possible:","It’s important that your server is optimized in a way that doesn’t have a domino effect on other vitals. To measure the “speed” of your server you can track the Time to First Byte (TTFB) vital.","Make sure that images are being served over a CDN, you’re serving formats like WebP or AVIF and you’re using responsive images techniques.","Once you have diagnosed which element on the page has the Largest Contentful Paint, the next step is to figure out why. There are 3 main factors that contribute to LCP:","Optimize and compress all images on the site - ensure images are not greater than twice their contained real-estate.","Render-blocking JavaScript and CSS.","Resource load times.","Serve assets (Images, JavaScript, CSS, Video) over a CDN.","Slow server response times.","The time it takes the browser to fetch resources like images or videos can also have an effect on LCP:","Use link rel=preconnect and link rel=dns-prefetch for assets that originate at third-party domains."]}],[{"l":"Developer Workflow","p":["Entermedia uses the Feature Branch Workflow for all GitHub repo projects. The core idea behind it is that all feature development should take place in a dedicated branch instead of the main or develop branch. This encapsulation makes it easy for multiple developers to work on a particular feature without disturbing the main codebase. It also means the main branch will never contain broken code, which is a huge advantage for continuous integration environments.","Encapsulating feature development also makes it possible to leverage pull requests, which are a way to initiate discussions around a branch. They give other developers the opportunity to sign off on a feature before it gets integrated into the official project. Or, if you get stuck in the middle of a feature, you can open a pull request asking for suggestions from your colleagues. The point is, pull requests make it incredibly easy for your team to comment on each other’s work."]},{"l":"Workflow Example","p":["All feature branches are created off the latest code state of a project, in Entermedia's projects, that will always be the develop branch. Updates should never be pushed to the main or develop branches directly.","Above switches the repo to the develop branch, pulls the latest commits and resets the repo's local copy of develop to match the latest version."]},{"l":"Create a feature branch","p":["Use a separate branch for each feature or issue you work on. After creating a branch, check it out locally so that any changes you make will be on that branch.","This checks out a branch called project-123 based on develop, and the -b flag tells Git to create the branch if it doesn’t already exist.","When naming branches, use the Jira issue number, all lowercase(i.e. project-183). This allows developers to quickly cross-reference the work done in that branch with the coorsponding issue number is Jira."]},{"i":"commit--push-changes","l":"Commit & push changes","p":["Edit, stage, and commit changes in the usual fashion, building up the feature with as many commits as necessary. Work on the feature and make commits like you would any time you use Git. When ready, push your commits, updating the feature branch on GitHub.","Entermedia uses commitlint to standarize commit messages. Learn how to install & configure commitlint","It’s a good idea to push the feature branch up to the central repository. This serves as a convenient backup, when collaborating with other developers, this would give them access to view commits to the new branch.","This pushes project-123 to the central repository ( origin). T"]},{"l":"Create a Pull Request","p":["To get feedback on the new feature branch, create a pull request into the develop branch.","Now teammates comment and approve the pushed commits. Resolve their comments locally, commit, and push the suggested changes to the feature branch. Your updates appear in the pull request.","Once all feedback has been resolved, the code reviewer will merge the feature branch into the develop branch, then to the main branch when all feature branches have been reviewed, merged, and ready to be deployed."]}],[{"i":"tools--resources","l":"Tools & Resources","p":["The following are tools & resources we use at Entermedia. This list will grow and change over time and is not meant to be comprehensive. Generally, we encourage or require these tools to be used in favor of other ones. Rules governing tools to be used and packaged with a client site will be much stricter than those used on internal projects.","Leasot- A command line tool to intelligently parse and output TODOs and FIXMEs from comments in your files. It allows you to easily extract, collect, and report TODOs and FIXMEs in your code using regex in order to extract your todos from comments."]},{"l":"Accessibility Testing","p":["We use a variety of tools to test our sites for accessibility issues. WebAim has some great resources on how to evaluate sites with a screen reader.","Using VoiceOver","Using NVDA","Using JAWS","We’re also a fan of a few browser tools that lend us a hand when it comes to testing areas like color contrast, heading hierarchy, and ARIA application.","Headings Map for Chrome or Headings Map for Firefox- A browser extension that allows you to see the heading structure of a webpage.","The Visual ARIA Bookmarklet- A bookmarklet that can be run on a webpage and color codes ARIA roles.","WAVE- A toolkit from WebAIM, that also has an extension for Chrome/Firefox. It evaluates a webpage and returns accessibility errors.","Accessibility Developer Tools- A Chrome extension that adds an “Audit” tab in Chrome’s developer tools that can scan a webpage for accessibility issues.","Tota11y- A visualization toolkit that can be used as a bookmarklet, and reveals accessibility errors on a webpage.","Contrast Ratio- A color contrast tool to compare two colors against levels of conformance and see if they pass.","Tanagaru Contrast Finder- Another color contrast tool that tests colors against the levels of conformance, but also provides you with alternatives should your provided colors fail."]}],[{"l":"commitlint","p":["Automatically determining a semantic version bump (based on the types of commits landed).","Automatically generating a CHANGELOG","build","chore","ci","Commit messages should follow this format:","Common types according to commitlint-config-conventional(based on the Angular convention) can be:","Communicating the nature of changes to teammates, the public, and other stakeholders","docs","Entermedia uses commitlint to organize and standarize commit messages which helps with:","feat","fix","Making it easier for people to contribute to your projects, by allowing them to explore a more structured commit history.","perf","Real world examples can look like this:","refactor","revert","style","test","Triggering build and publish processes"]},{"i":"install--configure-commitlint","l":"Install & Configure commitlint","p":["Install commitlint and commitlint-config-conventional, then configure commitlint to use it."]},{"l":"Install Husky","p":["Install husky as a devDependency, a handy git hook helper available on npm."]}],[{"l":"HTML"}],[{"l":"Checklist","p":["All items in the Front-End Checklist are required for the majority of the projects, but some elements can be omitted or are not essential."]},{"l":"Meta Tags","p":["Below are the essential elements for any web document (websites/apps):"]},{"l":"Recommended Meta Tags"},{"l":"Favicon","p":["Instead of serving dozens of icons, all you need is just five icons and one JSON file.","For the browser using HTML:","And in your web app manifest:"]},{"i":"open-graph--social-media-meta-tags","l":"Open Graph & Social Media Meta Tags"},{"l":"Open Graph Meta Tags"},{"l":"Twitter Meta Tags"}],[{"l":"CSS","p":["At Entermedia, we value content and the experience users will have reading it. We write CSS with this in mind and don't sacrifice our clients' most important assets over the latest, shiniest, half-supported CSS features just for the sake of using them. CSS should help enhance content, not bury it under “cool” distractions.","Our websites are built mobile first, using performant CSS. Well-structured CSS yields maintainability and better collaboration which ultimately yields better client experiences."]},{"l":"Frameworks"},{"l":"CSS Frameworks","p":["Entermedia doesn't use any CSS frameworks. Instead, we use a very simple library of common .scss files that reset the default CSS styles and define some variables containing the color palette and some other common styles, like standard fonts, text sizes, and shadows. There are many reasons we choose this approach, the most common being:","CSS is not hard.","The whole myth that CSS is difficult to learn is mostly a relic of the times when browsers were not fully standardized and we had to use quirks, hacks, and workarounds to make things work. Over the last decade, the situation has improved a lot; CSS is much more consistent and has wide support for a lot of useful features which make those hacks unnecessary. It’s definitely not perfect (hello, Safari), but it’s manageable.","Some people argue that CSS is difficult because it has become too complex and bloated. “Should I use flex or grid layout? Whatever, I’ll just use this framework and it will solve the problem.” So they end up learning the framework and its naming conventions, full of cryptic abbreviations, such as px-lg-n5, while they might just learn to use the right CSS properties instead.","Yes, CSS is complex, because over the years it has become a powerful and universal tool. In order to use a tool efficiently, you have to learn how it works. Unfortunately, CSS frameworks have the opposite effect — they teach us to copy and paste snippets of markup instead of actually understanding what’s going on.","Lastly, CSS and HTML are the foundation of the web, and unlike your favorite framework, they are not going to become obsolete a year from now."]},{"l":"Further Reading","p":["Why I stopped using CSS Frameworks, Should you too?","Why I No Longer Use CSS Frameworks","3 reasons to NOT use CSS Frameworks like Bootstrap and Materialize"]},{"l":"Grids","p":["Our preference is not to use a 3rd party grid system, use your best judgement and keep them simple! All too often we are faced with a design that isn't built on a grid or purposefully breaks a loosely defined grid. Even if the designer had a grid in mind, there are often needs that require more creative solutions. For example: fixed-width content areas to accommodate advertising.","Sometimes a more complex grid system is warranted and leveraging a 3rd party library will gain some efficiency. However, keep in mind that by adopting a grid system you are forcing all future collaborators on the project to learn this system."]},{"l":"CSS Reset","p":["Normalize.css is our primary tool for CSS resets."]},{"l":"Accessibility"},{"l":"Animation","p":["Not every animation brings pleasure to the end user. In some cases motion can trigger harmful reactions from users with vestibular disorders, epilepsy or even migraines.","The prefer-reduced-motion CSS media feature does not currently have the widest support, but is active in Safari and Firefox). However, we still recommend applying it, as it is simple to implement and affords a better experience for those using supported browsers.","Here is an example:","Read more about creating accessible animations."]},{"l":"Performance","p":["Let's be honest, CSS “speed” and performance is not as important as PHP or JavaScript performance. However, this doesn't mean we should ignore it. A sum of small improvements equals better experience for the user.","Three areas of concern are network requests, CSS specificity and animation performance.","Performance best practices are not only for the browser experience, but for code maintenance as well."]},{"l":"Responsive Design","p":["We build our websites mobile first. We do not rely on JavaScript libraries such as respond.js as it does not work well in certain environments. Instead, we leverage a natural, mobile-first build process and allow sites gracefully degrade."]},{"l":"Mobile-first Approach","p":["A responsive website should be built with min-width media queries, mobile-first. This approach means that our media queries are consistent, readable and minimize selector overrides.","For most selectors, properties will be added at later breakpoints. This way we can reduce the usage of overrides and resets.","It targets the least capable browsers first which is philosophically in line with mobile first","When media queries consistently “point” in the same direction, it makes it easier to understand and maintain stylesheets.","Avoid mixing min-width and max-width media queries."]},{"l":"Breakpoints","p":["Working with build tools that utilize Sass or PostCSS processing, we can take advantages of reusability and avoid having an unmaintainable number of breakpoints. Using variables and reusable code blocks we can lighten the CSS load and ease maintainability."]},{"l":"Media queries placement","p":["In your stylesheet files, nest the media query within the component it modifies. Do not create size-based partials (e.g. _1024px.(s)css, _480px.(s)css): it will be frustrating to hunt for a specific selector through all the files when we have to maintain the project. Putting the media query inside the component will allow developers to immediately see all the different styles applied to an element."]},{"l":"IE8 and older browser support","p":["We prefer showing a fixed-width non-responsive desktop version to older IE users rather than showing a mobile version, but do not officially support legacy browsers like IE.","Use a feature detection to target older browsers.","Load a different stylesheet for older browsers."]}],[{"l":"Directory Structure","p":["File structure unity across projects improves engineering efficiency and maintainability. We believe the following structure is segmented enough to keep projects organized—and thus maintainable—but also flexible and open ended enough to enable engineers to comfortably modify as necessary. All projects should derive from this structure:"]}],[{"i":"syntax--formatting","l":"Syntax & Formatting","p":["Syntax and formatting are keys to a maintainable project. By keeping our code style consistent, we not only help ourselves debug faster but we're also lessening the burden on those who will have to maintain our code (maybe ourselves too!)."]},{"l":"BEM Methodology","p":["Entermedia uses a variation of the BEM methodology(Block, Element, Modifier) for standarizing class names. BEM’s strict naming rules can be found here.","Example component using the BEM methodology:"]},{"l":"CSS Syntax","p":["CSS syntax is not strict and will accept a lot of variations, but for the sake of legibility and fast debugging, we follow basic code styles:","Write one selector per line","Write one declaration per line","Closing braces should be on a new line","Include one space before the opening brace","Include one space before the value","Include one space after each comma-separated values","Try to use lowercase for all values, except for font names","Zero values don't need units","End all declarations with a semi-colon, even the last one, to avoid errors","Use double quotes instead of single quotes","If you don't need to set all the values, don't use shorthand notation."]},{"l":"Declaration Ordering","p":["Declarations should be ordered alphabetically or by type (Positioning, Box model, Typography, Visual). Whichever order is chosen, it should be consistent across all files in the project.","If you're using Sass, use this ordering:","@extend","Regular styles (allows overriding extended styles, alphabetical order)","@include(to visually separate mixins and placeholders) and media queries","Nested selectors"]},{"l":"Nesting","p":["Nesting has changed the lives of many, but like everything in life, abusing good things will ultimately be bad. Nesting makes the code more difficult to read and can create confusion. Too much nesting also adds unnecessary specificity, forcing us to add the same or greater specificity in overrides. We want to avoid selector nesting and over-specificity as much as possible.","If you're using PostCSS or Sass nesting is required in the following cases, because it will make the code easier to read:","pseudo-classes","pseudo-elements","component states","media queries"]},{"l":"Selector Naming","p":["Selectors should be lowercase, and words should be separated with hyphens. Please avoid camelcase, but underscores are acceptable if they're being used for BEM or another syntax pattern that requires them. The naming of selectors should be consistent and describe the functional purpose of the styles they're applying.","For components that could possibly conflict with plugins or third-party libraries, use vendor prefixes. Don't use names that can be blocked by adblockers (e.g. “advertisement”). When in doubt, you can check a class name against this list to see if it's likely to be blocked."]},{"l":"Documentation","p":["Code documentation serves two purposes: it makes maintenance easier and it makes us stop and think about our code. If the explanation is too complex, maybe the code is overly complex too. Documenting helps keep our code simple and maintainable."]},{"l":"Commenting","p":["We follow WordPress official commenting standards. Do not hesitate to be very verbose with your comments, especially when documenting a tricky part of your CSS. Use comment blocks to separate the different sections of a partial, and/or to describe what styles the partial covers:","For single selectors or inline comments, use this syntax:","Make sure to comment any complex selector or rule you write. For example:"]},{"l":"Performance"},{"l":"Network Requests","p":["Limit the number of requests by concatenating CSS files and encoding sprites and font files to the CSS file","Minify stylesheets","Use GZIP compression when possible Automate these tasks with a PHP or/and JavaScript build process"]},{"l":"CSS Specificity","p":["Stylesheets should go from less specific rules to highly specific rules. We want our selectors specific enough so that we don't rely on code order, but not too specific so that they can be easily overridden.","For that purpose, classes are our preferred selectors: pretty low specificity but high reusability.","Avoid using !important whenever you can. Use efficient selectors."]},{"l":"Inheritance","p":["Fortunately, many CSS properties can be inherited from the parent. Take advantage of inheritance to avoid bloating your stylesheet but keep specificity in mind."]},{"l":"Reusable Code","p":["Styles that can be shared, should be shared (aka DRY, Don't Repeat Yourself). This will make our stylesheets less bloated and prevent the browser from doing the same calculations several times. Make good use of Sass placeholders. (also see Inheritance)."]},{"l":"CSS Over Assets","p":["Don't add an extra asset if a design element can be translated in the browser using CSS only. We value graceful degradation over additional HTTP requests.","Very common examples include gradients and triangles."]},{"l":"Animations","p":["It's a common belief that CSS animations are more performant than JavaScript animations. A few articles aimed to set the record straight (linked below).","If you're only animating simple state changes and need good mobile support, go for CSS (most cases).","If you need more complex animations, use a JavaScript animation framework or requestAnimationFrame.","Limit your CSS animations to 3D transforms (translate, rotate, scale) and opacity, as those are aided by the GPU and thus smoother. Note that too much reliance on the GPU can also overload it.","Always test animations on a real mobile device loading real assets, to ensure the limited memory environment doesn't tank the site. Note: WCAG 2.1, Guideline 2.3.2 Motion from Animation dictates that, “Motion animation triggered by interaction can be disabled, unless the animation is essential to the functionality or the information being conveyed.”"]},{"l":"Futher Reading","p":["CSS animations performance: the untold story","Myth Busting: CSS Animations vs. JavaScript","CSS vs. JS Animation: Which is Faster?","Why Moving Elements With Translate() Is Better Than Pos:abs Top/left","CSS vs JavaScript Animations","requestAnimationFrame"]}],[{"l":"JavaScript"}],[{"i":"reactjs","l":"React.js","p":["The purpose of this document is to help guide you through working with a potential project using the JavaScript library, React. Outside of the official React documentation, you should find here personalized recommendations for using the library based on the types of projects we typically see at Entermedia. We have broken these recommendations out into common elements we tend to interact with often in client work. If something you’re looking for isn’t represented you can either submit a pull request to this repository or refer to the official React documentation."]},{"l":"Useful Libraries","p":["The following is a list of primary React libraries used by Entermedia:","Next.js- The React.js framework Entermedia has standarized on.","Next.js for Drupal- Next.js Drupal headless applications.","Faust.js- Next.js WordPress headless applications.","Formik- Quickly build forms with validation, logic, i18n & more."]}],[{"l":"Components","p":["At Entermedia, we put an emphasis on standardization to create a stream-lined approach to any project, speed up development, and allows any developer to quickly transition without additional project-specific ramp-up time."]},{"l":"Components Directory Structure","p":["The following is how all React.js-based component directories should be structured (follows the Atomic Design approach):"]},{"l":"Component Template","p":["The following is how all React.js-based components should be structured:"]}],[{"i":"nextjs","l":"Next.js","p":["The purpose of this document is to help guide you through working with a potential project using the JavaScript library, Next.js. Outside of the official Next.js documentation, you should find here personalized recommendations for using the library based on the types of projects we typically see at Entermedia. We have broken these recommendations out into common elements we tend to interact with often in client work. If something you’re looking for isn’t represented you can either submit a pull request to this repository or refer to the official documentation."]},{"l":"Getting Started","p":["Entermedia follows a standardized approach for setting up new Next.js projects. This allows developers to easily switch between projects, faster project initialization, and ramp-up for new developers. All of these types of projects should start with this same setup."]},{"i":"step-1-project-installation","l":"Step 1: Project installation","p":["Entermedia uses the Next.js for Drupal for all headless Drupal projects. To begin, follow the instructions for creating a starter project.","Coming soon."]},{"i":"step-2-install-commitlint","l":"Step 2: Install commitlint","p":["For projects using a Git repository, install commitlint."]},{"i":"step-3-install-normalizecss","l":"Step 3: Install Normalize.css","p":["It's important that projects have the same starting point for browsers when rendering elements. Entermedia uses Normalize.css to do this to make elements render more consistently and in line with modern standards."]},{"i":"step-4-install-storybook","l":"Step 4: Install Storybook","p":["See Storybook installation instructions.","Follow these instructions to get Storybook up and running in the Next.js project. Once Storybook is installed, add the Next.js addon."]},{"i":"step-5-install-leasoft","l":"Step 5: Install Leasoft","p":["Entermedia uses Leasot to intelligently parse and output TODOs and FIXMEs from comments in your files. Once installed, add a new npm command in the package.json file:"]},{"l":"Project Structure","p":["Next.js is fairly open in how you can organize your files and directories; if you establish a good structure from the start-up, your subsequent work will be easier, faster, predictable, and scalable.","The following is Entermedia's standarized Next.js project structure setup:","styles Directory Structure","components Directory Structure"]}],[{"i":"tools--resources","l":"Tools & Resources","p":["The following are React.js tools & resources we use at Entermedia. This list will grow and change over time and is not meant to be comprehensive. Generally, we encourage or require these tools to be used in favor of other ones. Rules governing tools to be used and packaged with a client site will be much stricter than those used on internal projects.","html-react-parser- Coverts HTML strings to React elements.","Embla Carousel- A lightweight carousel library with fluid motion and great swipe precision.","NProgress.js- A nanoscopic progress bar featuring realistic trickle animations."]}],[{"l":"Storybook","p":["Entermedia uses Storybook for building UI components and pages in isolation, allowing for streamline UI development, testing, and documentation."]},{"i":"addons--resources","l":"Addons & Resources","p":["Chromatic- Ship UIs faster with automated workflows for Storybook."]}],[{"l":"PHP"},{"l":"Performance","p":["Writing performant code is absolutely critical, especially at the enterprise level. There are a number of strategies and best practices we must employ to ensure our code is optimized for high-traffic situations."]},{"l":"Efficient Queries","p":["Build arrays that encourage lookup by key instead of search by value. in_array() is not an efficient way to find if a given value is present in an array. The worst case scenario is that the whole array needs to be traversed, thus making it a function with O(n) complexity. VIP review reports in_array() use as an error, as it’s known not to scale.","The best way to check if a value is present in an array is by building arrays that encourage lookup by key and use isset(). isset() uses an O(1) hash search on the key and will scale.","Here is an example of an array that encourages lookup by key by using the intended values as keys of an associative array","In case you don’t have control over the array creation process and are forced to use in_array(), to improve the performance slightly, you should always set the third parameter to true to force use of strict comparison."]},{"l":"Caching","p":["Caching is simply the act of storing computed data somewhere for later use, and is an incredibly important concept in WordPress and Drupal. There are different ways to employ caching, and often multiple methods will be used."]},{"l":"Avoid Sessions","p":["Sessions add extra complexity to web sites and extra burden on hosting setups. Avoid using sessions to store individual users’ preferences or other data.","Instead of sessions, use cookies or client-side storage APIs if possible. In addition to keeping this data off the web servers, they empower site visitors to view and delete the data tied to their activity. Systems Engineers can configure full-page caches to ignore custom cookies so they don’t interfere with caching.","If sessions must be used, create them conservatively. Don’t create sessions for every visitor. Limit sessions to the smallest group that needs them: logged-in editors and admins, or visitors using a particular feature.","Sessions should never be stored in the database. This introduces extra data into a storage system that’s not meant for that volume. Database session libraries also rely on PHP code which can’t match the performance of PHP’s native session handlers. PHP extensions for Memcache and Redis allow sessions to be stored in these in-memory datastores and are a good solution for sessions when multiple webservers are present."]}],[{"l":"SVG","p":["SVG has become a prevalent means for displaying rich vector graphics. SVG images are great for graphics with well-defined lines and simple color palettes that can be defined algorithmically, e.g. logos, iconography, and illustrations. Here are a few known benefits of SVG:","Scalability- They look great on retina displays and at any size, i.e. they're resolution independent.","File Size- Small file size and compresses well.","Styling- Manipulate fill, stroke, and even animate.","Be mindful that SVGs have potential limitations as well:","Adding unvetted SVG graphics to a page has the potential to introduce a security vulnerability. This is why WordPress does not allow uploading of SVG by default. Read: SVG uploads in WordPress (the Inconvenient Truth) for more information.","SVG is not ideal for photographic images or images with complex visual data. In this case, raster formats (JPG, PNG, GIF) will be a better choice.","Raster images should not be converted to SVG. It will likely result in a raster image being embedded within the SVG document, which will not provide the same affordances (i.e. - CSS manipulation) as a genuine SVG. For further reading on vector vs. raster formats, and when to use each: Adding vector graphics to the Web."]},{"l":"SVG Sprites","p":["Combining SVG images in a single file (usually called svg-defs.svg) has the benefit of helping limit HTTP requests within a document that contains multiple icons. An SVG sprite file can be embedded within a document and referenced within the template source with a use element. The creation of this icon system should be automated through your build process. Read Icon Systems with SVG Sprites for more information."]},{"l":"SVG embedded in HTML","p":["When placing an SVG in markup (i.e. inline) be sure to use the following guidelines:","If the SVG is purely decorative","An empty alt=\"\" can be used: img alt=, or","Use ARIA attributes to hide the element from assistive technologies: svg aria-hidden=true","If the SVG is meaningful then use title and possibly even desc or aria-label to describe the graphic. Also, be sure to add an id to each element, and appropriate ARIA to overcome a known bug in Chrome and Firefox.","Use aria-label if the SVG is linked and has no supporting text.","Use media queries to provide fallbacks for Windows and High Contrast Mode."]},{"l":"Optimization","p":["Many tools for creating SVG are notorious for including unnecessary markup. We recommend running all SVG through SVGO(MG) or using tooling, like gulp-svgmin."]},{"l":"Further Reading","p":["SVG Tutorial","An Overview of SVG Sprite Creation Techniques","Using ARIA to enhance SVG accessibility","Accessible SVG Icons with Inline Sprites 24 Accessibility","Accessible SVG test page","Creating Accessible SVGs","Accessible SVGs"]}],[{"l":"WordPress"}],[{"l":"Internationalization","p":["All text strings in a project should be internationalized using core localization functions. Even if the project does not currently dictate a need for translatable strings, this practice ensures translation-readiness should a future need arise.","WordPress provides a myriad of localization functionality. Engineers should familiarize themselves with features such as pluralization and disambiguation so translations are flexible and translators have the information they need to work accurately.","Samuel Wood (Otto) put together a guide to WordPress internationalization best practices, and engineers should take time to familiarize themselves with its guidance: Internationalization: You’re probably doing it wrong","It’s important to note that the strings passed to translation functions should always be literal strings, never variables or named constants, and code shouldn’t use string interpolation to inject values into either string. Most tools used to create translations rely on GNU gettext scanning source code for translation functions. PHP code won’t be interpreted, only scanned like it was a block of plain text and stored similarly. If WordPress’s translation APIs can’t find an exact match for a string inside the translation files, it won’t be able to translate the string. Instead, use printf formatting codes inside the string to be translated and pass the translated version of that string to sprintf() to fill in the values.","For example:","Localizing a project differs from the core approach in two distinct ways:","A unique text domain should be used with all localization functions","Internationalized output should always be escaped"]},{"l":"Text Domains","p":["Each project should leverage a unique text domain for its strings. Text domains should be lowercase, alphanumeric, and use hyphens to separate multiple words: entermedia-project-name.","Like the translated strings they accompany, text domains should never be stored in a variable or named constant when used with core localization functions, as this practice can often produce unexpected results. Translation tools won’t interpret PHP code, only scan it like it was plain text. They won’t be able to assign the text domain correctly if it’s not there in plain text.","If the code is for release as a plugin or theme in the WordPress.org repositories, the text domain must match the directory slug for the project in order to ensure compatibility with the WordPress language pack delivery system. The text domain should be defined in the “Text Domain” header in the plugin or stylesheet headers, respectively, so the community can use GlotPress to provide new translations."]},{"l":"Escaping Strings","p":["Most of WordPress’s translation functions don’t escape output by default. So, it’s important to escape the translated strings like any other content.","To make this easier, the WordPress API includes functions that translate and escape in a single step. Engineers are encouraged to use these functions to simplify their code:"]},{"l":"For use in HTML","p":["esc_html__: Returns a translated and escaped string","esc_html_e: Echoes a translated and escaped string","esc_html_x: Returns a translated and escaped string, passing a context to the translation function"]},{"l":"For use in attributes","p":["esc_attr__: Returns a translated and escaped string","esc_attr_e: Echoes a translated and escaped string","esc_attr_x: Returns a translated and escaped string, passing a context to the translation functio"]}],[{"l":"Performance","p":["Writing performant code is absolutely critical, especially at the enterprise level. There are a number of strategies and best practices we must employ to ensure our code is optimized for high-traffic situations."]},{"l":"Efficient Database Queries","p":["When querying the database in WordPress, you should generally use a WP_Query object. WP_Query objects take a number of useful arguments and do things behind-the-scenes that other database access methods such as get_posts() do not.","Here are a few key points:","Only run the queries that you need. A new WP_Query object runs five queries by default, including calculating pagination and priming the term and meta caches. Each of the following arguments will remove a query:","'no_found_rows' = true: useful when pagination is not needed.","'update_post_meta_cache' = false: useful when post meta will not be utilized.","'update_post_term_cache' = false: useful when taxonomy terms will not be utilized.","'fields' = 'ids': useful when only the post IDs are needed (less typical).","Do not use posts_per_page = -1. This is a performance hazard. What if we have 100,000 posts? This could crash the site. If you are writing a widget, for example, and just want to grab all of a custom post type, determine a reasonable upper limit for your situation.","Do not use $wpdb or get_posts() unless you have good reason. get_posts() actually calls WP_Query, but calling get_posts() directly bypasses a number of filters by default. Not sure whether you need these things or not? You probably don't.","If you don't plan to paginate query results, always pass no_found_rows = true to WP_Query. This will tell WordPress not to run SQL_CALC_FOUND_ROWS on the SQL query, drastically speeding up your query. SQL_CALC_FOUND_ROWS calculates the total number of rows in your query which is required to know the total amount of “pages” for pagination.","Avoid using post__not_in. In most cases it's quicker to filter out the posts you don't need in PHP instead of within the query. This also means it can take advantage of better caching. This won't work correctly (without additional tweaks) for pagination.","A taxonomy is a tool that lets us group or classify posts.","Post meta lets us store unique information about specific posts. As such the way post meta is stored does not facilitate efficient post lookups. Generally, looking up posts by post meta should be avoided (sometimes it can't). If you have to use one, make sure that it's not the main query and that it's cached.","Passing cache_results = false to WP_Query is usually not a good idea. If cache_results = true(which is true by default if you have caching enabled and an object cache setup), WP_Query will cache the posts found among other things. It makes sense to use cache_results = false in rare situations (possibly WP-CLI commands).","Multi-dimensional queries should be avoided. Examples of multi-dimensional queries include:"]},{"i":"wp_query-vs-get_posts-vs-query_posts","l":"WP_Query vs. get_posts() vs. query_posts()","p":["As outlined above, get_posts() and WP_Query, apart from some slight nuances, are quite similar. Both have the same performance cost (minus the implication of skipping filters): the query performed.","query_posts(), on the other hand, behaves quite differently than the other two and should almost never be used. Specifically:","It creates a new WP_Query object with the parameters you specify.","It replaces the existing main query loop with a new instance of WP_Query","As noted in the WordPress Docs (along with a useful query flow chart), query_posts() isn't meant to be used by plugins or themes. Due to replacing and possibly re-running the main query, query_posts() is not performant and certainly not an acceptable way of changing the main query."]},{"i":"the-object-cache","l":"The “Object Cache”","p":["As the content is cached for 300 seconds, the query execution is limited to one time every 5 minutes, which is nice.","As the objects are stored in memory, you need to consider that these objects can be cleared at any time and that your code must be constructed in a way that it would not rely on the objects being in place.","For that reason, it's best to make the code that repopulates the cache available for many situations.","Here is how it's done:","High-traffic environments not using a persistent caching mechanism should be wary of using transients and filling the wp_options table with an excessive amount of data. See the “[Appropriate Data Storage]” section for details.","However, the cache rebuild in this example would always be triggered by a visitor who would hit a stale cache, which will increase the page load time for the visitors and under high-traffic conditions. This can cause race conditions when a lot of people hit a stale cache for a complex query at the same time. In the worst case, this could cause queries at the database server to pile up causing replication, lag, or worse.","In some cases, it might be necessary to create multiple objects depending on the parameters a function is called with. In these cases, it's usually a good idea to create a cache key which includes a representation of the variable parameters. A simple solution for this would be appending an md5 hash of the serialized parameters to the key name.","In the above example, the cache is checked for an object with the 10 most commented posts and would generate the list in case the object is not in the cache yet. Generally, calls to WP_Query other than the main query should be cached.","In WordPress, the object cache functionality provided by WP_Object_Cache, and the Transients API are great solutions for improving performance on long-running queries, complex functions, or similar.","It is possible to create a transient that will never expire by omitting the third parameter, this should be avoided as any non-expiring transients are autoloaded on every page and you may actually decrease performance by doing so.","Object caching is the act of caching data or objects for later use. In the context of WordPress, objects are cached in memory so they can be retrieved quickly.","On a regular WordPress install, the difference between transients and the object cache is that transients are persistent and would write to the options table, while the object cache only persists for the particular page load.","On environments with a persistent caching mechanism (i.e. Memcache, Redis, or similar) enabled, the transient functions become wrappers for the normal WP_Object_Cache functions. The objects are identically stored in the object cache and will be available across page loads.","That said, a relatively easy solution for this problem is to make sure that your users would ideally always hit a primed cache. To accomplish this, you need to think about the conditions that need to be met to make the cached value invalid. In our case this would be the change of a comment.","The easiest hook we could identify that would be triggered for any of this actions would be wp_update_comment_count set as do_action( 'wp_update_comment_count', $post_id, $new, $old ).","This means you always need to ensure you check for the existence of a cached object and be ready to generate it in case it's not available. Here is an example:","With this implementation, you can keep the cache object forever and don't need to add an expiration for the object as you would create a new cache entry whenever it is required. Just keep in mind that some external caches (like Memcache) can invalidate cache objects without any input from WordPress.","With this in mind, the function could be changed so that the cache would always be primed when this action is triggered."]},{"l":"Page Caching","p":["Page caching in the context of web development refers to storing a requested location's entire output to serve in the event of subsequent requests to the same location.","Batcache is a WordPress plugin that uses the object cache (often Memcache in the context of WordPress) to store and serve rendered pages. It can also optionally cache redirects. It's not as fast as some other caching plugins, but it can be used where file-based caching is not practical or desired.","Batcache is aimed at preventing a flood of traffic from breaking your site. It does this by serving old (5 minute max age by default, but adjustable) pages to new users. This reduces the demand on the web server CPU and the database. It also means some people may see a page that is a few minutes old. However, this only applies to people who have not interacted with your website before. Once they have logged-in or left a comment, they will always get fresh pages.","Although this plugin has a lot of benefits, it also has a couple of code design requirements:","As the rendered HTML of your pages might be cached, you cannot rely on server side logic related to $_SERVER, $_COOKIE or other values that are unique to a particular user.","You can however implement cookie or other user based logic on the front-end (e.g. with JavaScript)","Batcache does not cache logged in users (based on WordPress login cookies), so keep in mind the performance implications for subscription sites (like BuddyPress). Batcache also treats the query string as part of the URL which means the use of query strings for tracking campaigns (common with Google Analytics) can render page caching ineffective. Also beware that while WordPress VIP uses batcache, there are specific rules and conditions on VIP that do not apply to the open source version of the plugin.","There are other popular page caching solutions such as the W3 Total Cache plugin, though we generally do not use them for a variety of reasons."]},{"l":"AJAX Endpoints","p":["AJAX stands for Asynchronous JavaScript and XML. Often, we use JavaScript on the client-side to ping endpoints for things like infinite scroll.","WordPress provides an API to register AJAX endpoints on wp-admin/admin-ajax.php. However, WordPress does not cache queries within the administration panel for obvious reasons. Therefore, if you send requests to an admin-ajax.php endpoint, you are bootstrapping WordPress and running un-cached queries. Used properly, this is totally fine. However, this can take down a website if used on the frontend.","For this reason, front-facing endpoints should be written by using the Rewrite Rules API and hooking early into the WordPress request process.","Here is a simple example of how to structure your endpoints:"]},{"l":"Cache Remote Requests","p":["Requests made to third-parties, whether synchronous or asynchronous, should be cached. Not doing so will result in your site's load time depending on an unreliable third-party!","Here is a quick code example for caching a third-party request:","prefix_get_posts_from_other_blog() can be called to get posts from a third-party and will handle caching internally."]},{"l":"Appropriate Data Storage","p":["Utilizing built-in WordPress APIs we can store data in a number of ways.","We can store data using options, post meta, post types, object cache, and taxonomy terms.","There are a number of performance considerations for each WordPress storage vehicle:","Options- The options API is a simple key-value storage system backed by a MySQL table. This API is meant to store things like settings and not variable amounts of data.","Site performance, especially on large websites, can be negatively affected by a large options table. It's recommended to regularly monitor and keep this table under 500 rows. The “autoload” field should only be set to ‘yes' for values that need to be loaded into memory on each page load.","Caching plugins can also be negatively affected by a large wp_options table. Popular caching plugins such as Memcached place a 1MB limit on individual values stored in cache. A large options table can easily exceed this limit, severely slowing each page load.","Post Meta or Custom Fields- Post meta is an API meant for storing information specific to a post. For example, if we had a custom post type, “Product”, “serial number” would be information appropriate for post meta. Because of this, it usually doesn't make sense to search for groups of posts based on post meta.","Taxonomies and Terms- Taxonomies are essentially groupings. If we have a classification that spans multiple posts, it is a good fit for a taxonomy term. For example, if we had a custom post type, “Car”, “Nissan” would be a good term since multiple cars are made by Nissan. Taxonomy terms can be efficiently searched across as opposed to post meta.","Custom Post Types- WordPress has the notion of “post types”. “Post” is a post type which can be confusing. We can register custom post types to store all sorts of interesting pieces of data. If we have a variable amount of data to store such as a product, a custom post type might be a good fit.","Object Cache- See the Object Cache section above."]},{"l":"Database Writes","p":["Generally, do not write to the database on frontend pages as doing so can result in major performance issues and race conditions.","When multiple threads (or page requests) read or write to a shared location in memory and the order of those read or writes is unknown, you have what is known as a race condition.","Store information in the correct place. See the “ Appropriate Data Storage” section.","Certain options are “autoloaded” or put into the object cache on each page load. When creating or updating options, you can pass an $autoload argument to add_option(). If your option is not going to get used often, it shouldn't be autoloaded. As of WordPress 4.2, update_option() supports configuring autoloading directly by passing an optional $autoload argument. Using this third parameter is preferable to using a combination of delete_option() and add_option() to disable autoloading for existing options."]}],[{"l":"Security","p":["Security in the context of web development is a huge topic. This section only addresses some of the things we can do at the server-side code level."]},{"l":"Input Validation and Sanitization","p":["To validate is to ensure the data you’ve requested of the user matches what they’ve submitted. Sanitization is a broader approach ensuring data conforms to certain standards such as an integer or HTML-less text. The difference between validating and sanitizing data can be subtle at times and context-dependent.","Validation is always preferred to sanitization. Any non-static data that is stored in the database must be validated or sanitized. Not doing so can result in creating potential security vulnerabilities.","WordPress has a number of validation and sanitization functions built-in.","Sometimes it can be confusing as to which is the most appropriate for a given situation. Other times, it’s even appropriate to write our own sanitization and validation methods.","Here’s an example of validating an integer stored in post meta:","$_POST['user_id'] is validated using absint() which ensures an integer = 0. Without validation (or sanitization), $_POST['user_id'] could be used maliciously to inject harmful code or data into the database.","Here is an example of sanitizing a text field value that will be stored in the database:","Since update_option() is storing in the database, the value must be sanitized (or validated). The example uses the sanitize_text_field() function, which is appropriate for sanitizing general text fields."]},{"l":"Raw SQL Preparation and Sanitization","p":["There are times when dealing directly with SQL can’t be avoided. WordPress provides us with $wpdb.","$wpdb-prepare() behaves like sprintf() and essentially calls mysqli_real_escape_string() on each argument. mysqli_real_escape_string() escapes characters like ' and which prevents many SQL injection attacks.","By using %d in sprintf(), we are ensuring the argument is forced to be an integer. You might be wondering why absint() was used since it seems redundant. It’s better to over sanitize than to miss something accidentally.","Here is another example:","$wpdb-insert() creates a new row in the database. $post_content is being passed into the post_content column. The third argument lets us specify a format for our values sprintf() style. Forcing the value to be a string using the %s specifier prevents many SQL injection attacks. However, wp_kses_post() still needs to be called on $post_content as someone could inject harmful JavaScript otherwise."]},{"l":"Escape or Validate Output","p":["Are you providing a meta box for users to enter arbitrary HTML? Perhaps you can generate the HTML programmatically and provide the user with a few options to customize.","esc_html() ensures output does not contain any HTML thus preventing JavaScript injection and layout breaks.","Here are some simple examples of late-escaped output:","Here is another example:","Here’s an example:","If you do have to use wp_kses_* on the frontend, output should be cached for as long as possible.","If you need to escape such that HTML is permitted (but not harmful JavaScript), the wp_kses_* functions can be used:","Instead of using the generic __() function, something like esc_html__() might be more appropriate. Instead of using the generic _e() function, esc_html_e() would instead be used.","Note that wp_json_encode() includes the string-delimiting quotes for you.","sanitize_email() ensures output is a valid email address. This is an example of validating our data. A broader escaping function like esc_attr() could have been used, but instead sanitize_email() was used to validate.","Sometimes you need to escape data that is meant to serve as an attribute. For that, you can use esc_attr() to ensure output only contains characters appropriate for an attribute:","There are many escaping situations not covered in this section. Everyone should explore the WordPress Plugin Handbook section on escaping output to learn more.","To escape is to ensure data conforms to specific standards before being passed off. Validation, again, ensures that data matches what is to be expected in a much stricter way. Any non-static data outputted to the browser must be escaped or validated.","Translated text also often needs to be escaped on output.","WordPress has a number of core functions that can be leveraged for escaping. At Entermedia, we follow the philosophy of late escaping. This means we escape things just before output in order to reduce missed escaping and improve code readability.","wp_json_encode() ensures that whatever is returned is safe to be printed in your JavaScript code. It returns a JSON encoded string.","wp_kses_* functions should be used sparingly as they have bad performance due to a large number of regular expression matching attempts. If you find yourself using wp_kses_*, it’s worth evaluating what you are doing as a whole."]},{"l":"Nonces","p":["In programming, a nonce, or number used only once, is a tool used to prevent CSRF or cross-site request forgery.","The purpose of a nonce is to make each request unique so an action cannot be replayed.","WordPress’ implementation of nonces are not strictly numbers used once, though they serve an equal purpose.","The literal WordPress definition of nonces is “A cryptographic token tied to a specific action, user, and window of time.”. This means that while the number is not a true nonce, the resulting number is specifically tied to the action, user, and window of time for which it was generated.","Let’s say you want to trash a post with ID 1. To do that, you might visit this URL: https://example.com/wp-admin/post.php?post=1action=trash","Since you are authenticated and authorized, an attacker could trick you into visiting a URL like this: https://example.com/wp-admin/post.php?post=2action=trash","For this reason, the trash action requires a valid WordPress nonce.","After visiting https://example.com/wp-admin/post.php?post=1action=trash_wpnonce=b192fc4204, the same nonce will not be valid in https://example.com/wp-admin/post.php?post=2action=trash_wpnonce=b192fc4204.","Update and delete actions (like trashing a post) should require a valid nonce.","Here is some example code for creating a nonce:","When the form request is processed, the nonce must be verified:"]}],[{"i":"tools--resources","l":"Tools & Resources","p":["The following are WordPress tools & resources we use at Entermedia. This list will grow and change over time and is not meant to be comprehensive. Generally, we encourage or require these tools to be used in favor of other ones. Rules governing tools to be used and packaged with a client site will be much stricter than those used on internal projects.","WP-CLI- A command line interface for WordPress. This is an extremely powerful tool that allows us to do imports, exports, run custom scripts, and more via the command line. Often this is the only way we can affect a large database."]}],[{"l":"Drupal"}],[{"i":"servers--hosting","l":"Servers & Hosting"},{"l":"Performance","p":["At Entermedia, we understand the importance of performance in delivering a great user experience and ensuring that content is optimized for search engine rankings. As the web and application development has evolved, feature rich content can be problematic and slow to load, particularly on mobile devices. It is more important than ever to pay careful consideration towards performance when designing and engineering solutions.","There are multiple factors to take into account when considering performance on a project. Third party embeds or scripts can often have a negative impact on performance, but in some cases the inherent value that they bring may justify the performance impact incurred.","While performance is always important, actual needs vary by website. For example, an internal company tool might not place as much importance on it as an online store. As such, Entermedia has developed these baseline performance best practices to be implemented on all our projects. On some projects more will be done for performance, but we strive to achieve this baseline no matter what. Also worth mentioning is we don’t have any sort of standard “numbers” e.g. core web vitals, PSI score, or TTFB. This is because there is no one number that can apply to all websites."]},{"l":"Baseline Performance Best Practices"},{"l":"Caching","p":["Caching is a key aspect in reaching optimal performance both from a server and browser optimization perspective, below are caching approaches:","Ensure all static assets have cache busters in the form of either a version or fingerprint in the filename or unique query string in the URL. This needs to be implemented along with a cache-control header max-age of at least 1 month but optimally 1 year.","A CDN is highly recommended, most popular CDN’s may offer page caching, browser caching and image optimizations.","Page caching should be set up, a lot of common hosting companies including WP Engine and WordPress VIP offer full page caching.","Object caching should be leveraged where applicable on the server.","All projects should have a manifest file to download static assets that will be rarely updated."]}]]