import { useEffect } from "react";

import Head from "next/head";
import Link from "next/link";

import Heading from "../../components/atoms/Headline/Headline";

import prismjs from "prismjs";

import "prismjs/themes/prism-coy.css";
require("prismjs/components/prism-scss");

import classes from "../../styles/layout.module.scss";

export default function CSS() {
  useEffect(() => {
    prismjs.highlightAll();
  }, []);

  return (
    <>
      <Head>
        <title>Javascript Best Practices</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <section>
        <Heading section="1" id="javascript">
          JavaScript
        </Heading>
        <Heading section="2" id="code-style" showLink>
          Code Style, Tooling &amp; Documentation
        </Heading>
        <p>
          Entermedia maintains a{" "}
          <a
            href="https://github.com/10up/eslint-config"
            target="_blank"
            rel="noreferrer"
          >
            eslint shareable config
          </a>{" "}
          that is used across all 10up projects. It exposes several different
          configs and engineers should opt-in to the config that best fits the
          project. We also maintain a{" "}
          <a
            href="https://github.com/10up/babel-preset-default/"
            target="_blank"
            rel="noreferrer"
          >
            babel-preset
          </a>{" "}
          that works well for most of our projects.
        </p>
        <p>
          As far as JavaScript documentation goes, we conform to the{" "}
          <a
            href="https://make.wordpress.org/core/handbook/best-practices/inline-documentation-standards/javascript/"
            target="_blank"
            rel="noreferrer"
          >
            WordPress JavaScript documentation standards
          </a>{" "}
          and those standards are enforced by Entermedia&apos;s eslint config.
        </p>
        <Heading section="2" showLink>
          Design Patterns
        </Heading>
        <p>
          Standardizing the way we structure our JavaScript allows us to
          collaborate more effectively with one another. Using intelligent
          design patterns improves maintainability, code readability, and even
          helps to prevent bugs.
        </p>
        <Heading section="3">Writing Modern JavaScript</Heading>
        <p>
          It’s important we use language features that are intended to be used.
          This means not using deprecated functions, methods, or properties.
          Whether we are using plain JavaScript or a library, we should not use
          deprecated features. Using deprecated features can have negative
          effects on performance, security, maintainability, and compatibility.
        </p>
        <p>
          On all new projects you should be using up to date JavaScript
          methodologies combined with a build process tool like Babel to ensure
          browser compatibility. This allows us to utilize modern techniques
          while being certain our code will not break in older systems. The{" "}
          <a
            href="https://github.com/10up/wp-scaffold"
            target="_blank"
            rel="noreferrer"
          >
            Entermedia WP Scaffold
          </a>{" "}
          have this functionality built in.
        </p>
        <p>
          Some older projects that have not yet been upgraded may not have the
          capability to use the most modern techniques, but it is still
          important to have processes in place that allow us to grow the
          technology stack as a project matures. In these cases, you should
          still follow best practice recommendations even if the newest patterns
          are not yet available to you.
        </p>
        <Heading section="4">Using Classes</Heading>
        <p>
          Before ES6, classes in JavaScript were created by building a
          constructor function and adding properties by extending the prototype
          object. This created a fairly complex way to extend classes and deal
          with prototypal inheritance. Modern techniques allow us to create and
          extend classes directly and write cleaner code:
        </p>
        <pre>
          <code className="language-javascript">{`class BasicExample {
	constructor(el) {
		super(); // if you're extending
	}

	init() {
		console.log('Hello world.');
	}
}`}</code>
        </pre>
        <p>
          Classes in modern JavaScript offer a nicer syntax to access the
          standard prototypal inheritance we’ve already had for a while, but can
          also help guide the structure of componentized code. When deciding
          whether or not to use a Class, think of the code you’re writing in the
          greater context of the application.
        </p>
        <p>
          Classes will not always be the answer for creating modular code in
          your application, but you should consider them when you need to create
          discrete components or when those components need to inherit behaviors
          from other components, while still functioning as a single unit. For
          example, a utility function that searches a string for text may not be
          a good utilization of Classes, but an accordion menu with children
          components would.
        </p>
        <Heading section="4">Using Arrow Functions</Heading>
        <p>
          Arrow functions are a great way to slim down easily executable code
          blocks. When using this style of function be sure not to over engineer
          a simple action just to make it smaller. For example, this is a good
          use of a simple multiline function being compressed into a single
          line:
        </p>
        <p>Multi-line:</p>
        <pre>
          <code className="language-javascript">{`const init = (msg) => {
	console.log(msg);
};`}</code>
        </pre>
        <p>Single line:</p>
        <pre>
          <code className="language-javascript">{`const init = (msg) => console.log(msg);`}</code>
        </pre>
        <p>
          This is a very simple function, so compressing it down into a single
          line won’t cause any readability issues. However, the more complicated
          this function gets, the less likely it should be on a single line.
        </p>
        <p>
          Even though single argument arrow functions don’t require parenthesis
          around the argument itself, it is best to include the parenthesis for
          improved readability and scalability of the function.
        </p>
        <p>
          Something important to remember is that arrow functions are not always
          the answer. Their release addressed a very specific problem many
          engineers were facing with preserving the context of <code>this</code>
          . In a traditional function <code>this</code> is bound to different
          values depending on the context it is called. With arrow functions, it
          is bound to the code that contains the arrow function. Because arrow
          functions also have syntax benefits, as a general rule, use arrow
          functions unless you need a more traditional treatment of{" "}
          <code>this</code> (like in an event listener).
        </p>
        <Heading section="4">Concatenating Strings and Templating</Heading>
        <p>
          When dealing with strings in JavaScript, it is very common to need
          some form of concatenation along the way. Before ES6 we were
          concatenating string with the <code>+</code> operator:
        </p>
        <pre>
          <code className="language-javascript">{`/* eslint-disable */
var first = 'hello';
var last = 'world';
var msg = 'I said, "' + first + ' ' + last + '" to the crowd.';`}</code>
        </pre>
        <p>
          Modern techniques give us something called, “template literals”, which
          let us concatenate strings in a much more straightforward manner
          utilizing the back tick and some basic templating:
        </p>
        <pre>
          <code className="language-javascript">{`const first = 'hello';
const last = 'world';
const msg = \`I said, "\${first} \${last}," to the crowd.\`;`}</code>
        </pre>
        <Heading section="4">Destructuring Arrays and Objects</Heading>
        <p>
          Destructuring is a JavaScript technique that allows you to easily
          assign values and properties from arrays and objects into specific
          variables. This direct mapping affords an easy way to access data from
          objects and arrays in a more convenient syntax.
        </p>
        <p className={classes["error-text"]}>The old way:</p>
        <pre>
          <code className="language-javascript">{`const arr = [1, 2, 3, 4];
const a = arr[0];
const b = arr[1];
const c = arr[2];
const d = arr[3];`}</code>
        </pre>
        <p className={classes["success-text"]}>The new way:</p>
        <pre>
          <code className="language-javascript">{`const [a, b, c, d] = [1, 2, 3, 4];
console.log(a); // 1
console.log(b); // 2
console.log(c); // 3
console.log(d); // 4`}</code>
        </pre>
        <p>
          Use destructuring whenever possible to slim down your code and improve
          overall readability.
        </p>
        <Heading section="4">Componentizing Your Code</Heading>
        <p>
          Keeping different bits of functionality in your code reasonably
          separated is important to building and maintaining a scalable system
          over time. In the past we’ve had to accomplish this with our build
          systems leaning on concatenation as an abstraction layer to the
          project. Modern JavaScript techniques allow us to utilize{" "}
          <code>import</code> statements to break apart and reassemble your code
          into consumable chunks.
        </p>
        <p>
          When you’re building your project, be sure to lean on imports to wire
          your application together. As of right now, we do still need a build
          system to process the code so it can be consumed by a browser, but
          using this modern technique will make sure our code is well structured
          as the project ages. You can also use <code>import</code> statements
          to load parts of an external library you may need for any given
          component. The code below will give you an example:
        </p>
        <pre>
          <code className="language-javascript">{`// Only loading in the map method from lodash, because that's all we need!
import map from 'lodash/map';`}</code>
        </pre>
        <p>
          This also allows you to build one component and import it into
          another.
        </p>
        <p>
          It’s also worth noting that named exports can be imported by wrapping
          the exported function within curly braces:
        </p>
        <pre>
          <code className="language-javascript">{`import { example } from 'example/lib';`}</code>
        </pre>
        <p>
          This is only possible if the exported component is a named export like
          so:
        </p>
        <pre>
          <code className="language-javascript">{`export const example = 66;`}</code>
        </pre>
        <Heading section="3">Modules</Heading>
        <p>
          When creating your own modules be sure to think about how it should be
          used by others. Luckily ES6 modules makes this a simple task.
        </p>
        <p>
          There are many ways you can export a module, but typically exposing
          specific functions and/or data structures through an ES6 module is the
          preferred way.
        </p>
        <pre>
          <code className="language-javascript">{`// datastructure.js
// private variable to the module
const data = {};

// private function to the module
const process = (value) => {
	// complex logic
	return value;
};

// the two functions below are public
export const getData = (field) => {
	return process(data[field]);
};

export const addData = (field, value) => {
	data[field] = value;
};`}</code>
        </pre>
        <p>
          In the module above only two functions are being exposed, everything
          else is private to the module, therefore this module can be used as
          following.
        </p>
        <pre>
          <code className="language-javascript">{`import { addData, getData } from './datastructure';

addData('key', 'myvalue');

const value = getData('key');`}</code>
        </pre>
        <p>
          Avoid using classes unless there’s a good reason to. Consider the
          following example:
        </p>
        <pre>
          <code className="language-javascript">{`import Module from './mymodule';
/* Module is a ES6 class */
new Module('.element-selector', {
	/* options */
	onEvent1: () => {},
	onEvent2: () => {},
});`}</code>
        </pre>
        <p>
          A good indicator that you don’t need classes is when you don’t need
          the instance of that class. For this reason our eslint config has the{" "}
          <a
            href="https://eslint.org/docs/rules/no-new"
            target="_blank"
            rel="noreferrer"
          >
            no-new
          </a>{" "}
          rule enabled. The code sample below provides a better alternative.
        </p>
        <pre>
          <code className="language-javascript">{`// Option 1: still using classes but with a better design
import Module from './mymodule';

const module1 = new Module('.element-selector', {
	/* options */
});
module1.addEventListener('onEvent1', () => {});
module1.addEventListener('onEvent2', () => {});
module1.doSomething();
module1.hide();`}</code>
        </pre>
        <p>
          The example above changes the design of the module API a bit and
          assumes multiple and separate instance of the module are desired.
          However, sometimes that might not even be necessary. If all you need
          is to abstract some complex logic and accept a couple of parameter,
          exposing a factory/init function is all you need.
        </p>
        <pre>
          <code className="language-javascript">{`// Option 2: not using classes
import module from './mymodule';

module('.element-selector', {
	/* options */
});`}</code>
        </pre>
        <Heading section="3">Don’t Pollute the Window Object</Heading>
        <p>
          Adding methods or properties to the <code>window</code> object or the
          global namespace should be done carefully. <code>window</code> object
          pollution can result in collisions with other scripts. If you need to
          expose data to the rest of your application, you should first consider
          using some sort of state management. Sometimes however, exposing
          methods or properties to the <code>window global</code> is necessary
          and when doing so wrap your code in closures and expose methods and
          properties to window with caution.
        </p>
        <p>
          When a script is not wrapped in a closure, the current context or{" "}
          <code>this</code> is actually <code>window</code>:
        </p>
        <pre>
          <code className="language-javascript">{`/console.log(this === window); // true

for (var i = 0; i < 9; i++) {
	// Do stuff
}

const result = true;

console.log(window.result === result); // true
console.log(window.i === i); // true`}</code>
        </pre>
        <p>
          When we put our code inside a closure, our variables are private to
          that closure unless we expose them:
        </p>
        <pre>
          <code className="language-javascript">{`(function () {
	for (let i = 0; i < 9; i++) {
		// Do stuff
	}

	window.result = true;
})();

console.log(typeof window.result !== 'undefined'); // true
console.log(typeof window.i !== 'undefined'); // false`}</code>
        </pre>
        <p>
          Notice how <code>i</code> was not exposed to the window object.
        </p>
        <Heading section="3">Secure Your Code</Heading>
        <p>
          In JavaScript, we often have to insert new elements with dynamic
          attributes and content into the DOM. A common way to do this is to use
          the <code>innerHTML</code> method like so:
        </p>
        <pre>
          <code className="language-javascript">{`const someElement = document.getElementById('someElement');
const someUrl = 'https://someurl.com/';
const someContent = 'Some content';

someElement.innerHTML = \`<div class="container"><a href="\${someUrl}">\${someContent}</a></div>\`;`}</code>
        </pre>
        <p>
          However, passing HTML strings to <code>innerHTML</code> and methods
          like it can expose your code to{" "}
          <a
            href="https://developer.mozilla.org/en-US/docs/Glossary/Cross-site_scripting"
            target="_blank"
            rel="noreferrer"
          >
            cross-site scripting
          </a>
          , also known as XSS—the most common security vulnerability in
          JavaScript. Because these methods evaluate strings passed to them as
          HTML, they can execute potentially harmful code. For instance, if{" "}
          <code>someContent</code> in the above example is{" "}
          <code>{`<img src="fakeImage" onerror="alert( 'hacked!' )" />`}</code>,
          the JavaScript in the <code>onerror</code> attribute will be executed.
        </p>
        <p>
          There are several measures you can take to circumvent this XSS
          vulnerability:
        </p>
        <Heading section="4">
          Use <code>textContent</code> instead of <code>innerHTML</code>
        </Heading>
      </section>
    </>
  );
}
