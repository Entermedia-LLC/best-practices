(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[71],{6731:function(e,_,s){(window.__NEXT_P=window.__NEXT_P||[]).push(["/design",function(){return s(9592)}])},9592:function(e,_,s){"use strict";s.r(_),s.d(_,{default:function(){return d}});var n=s(5893),r=s(7294),i=s(9008),a=s(323),t=s(2430),o=s(4725),l=s.n(o),c=(s(1804),s(1664));function d(){return(0,r.useEffect)((function(){l().highlightAll()}),[]),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(i.default,{children:(0,n.jsx)("title",{children:"Project Design | Entermedia Best Practices"})}),(0,n.jsx)(a.Z,{children:(0,n.jsxs)("section",{children:[(0,n.jsx)(t.Z,{level:1,id:"design",children:"Project Design"}),(0,n.jsx)(t.Z,{level:2,id:"organization",showAnchor:!0,children:"Project File Organization"}),(0,n.jsx)("p",{children:"File structure unity across themes and plugins improves engineering efficiency and maintainability. We believe the following structure is segmented enough to keep projects organized\u2014and thus maintainable\u2014but also flexible and open ended enough to enable engineers to comfortably modify as necessary. All themes and plugins should derive from this structure:"}),(0,n.jsx)("pre",{children:(0,n.jsx)("code",{className:"language-markup",children:"|- assets/\n  |  |- styles/ _______________________________ # See below for details\n  |  |- fonts/ _____________________________ # Custom/hosted fonts\n  |  |- images/ ____________________________ # Theme images\n  |  |- js/ ________________________________ # See below for details\n  |  |- svg/ _______________________________ # Vector images that will be processed into icons\n  |- .editorconfig _________________________ # Editor config settings"})}),(0,n.jsxs)("p",{children:["The ",(0,n.jsx)("code",{children:"styles"})," folder is described separately, below to improve readability (see"," ",(0,n.jsx)(c.default,{href:"/css#aria-base-styles",children:"CSS Structure & Base Styles"})," ","for defaults):"]}),(0,n.jsx)("pre",{children:(0,n.jsx)("code",{className:"language-markup",children:"|- styles/ ___________________________________ # Non-component specific styles\n|    |- base.scss ____________________________ # Base HTML element styles\n|    |- global/ ______________________________ # Sass variables, mixins & functions\n|       |- _core.scss ________________________ # Includes all required core files\n|       |- _mixins.scss ______________________ # Sass mixins\n|       |- _variables.scss ___________________ # Sass variables\n|    |- helpers/ _____________________________ # Helper classes\n|       |- layout.module.scss ________________ # Layout helpers classes\n|    |- theme/ _______________________________ # Theme styles\n|       |- default.scss ______________________ # Default CSS theme variables"})}),(0,n.jsx)(t.Z,{level:2,id:"package-management",showAnchor:!0,children:"Dependencies and Package Management"}),(0,n.jsx)("p",{children:"Projects generally use two different types of dependency management:"}),(0,n.jsxs)("ul",{children:[(0,n.jsxs)("li",{children:[(0,n.jsx)("a",{href:"https://npmjs.org",target:"_blank",rel:"noreferrer",children:"npm"})," ","is used to manage relevant dependencies."]}),(0,n.jsxs)("li",{children:[(0,n.jsx)("a",{href:"https://getcomposer.org",target:"_blank",rel:"noreferrer",children:"Composer"})," ","is used primarily for back-end (i.e. admin or PHP-based) dependencies"]})]}),(0,n.jsx)(t.Z,{level:3,children:"When and How to Use Packages"}),(0,n.jsxs)("p",{children:["When choosing a third-party library for inclusion in your project, see if it\u2019s available on npm (JavaScript) or Packagist (PHP). Additionally, WordPress plugins and themes are often available on"," ",(0,n.jsx)("a",{href:"https://wpackagist.org/",target:"_blank",rel:"noreferrer",children:"wpackagist.org"}),". Retrieving dependencies from a package repo helps slim down the code in our version control repos, meaning there\u2019s less we need to retrieve when a new engineer starts on a project. It also contributes to easily keeping code up to date with security and performance improvements."]}),(0,n.jsx)("p",{children:"Most package managers differentiate between dependencies and devDependencies:"}),(0,n.jsxs)("ul",{children:[(0,n.jsx)("li",{children:"devDependencies are code, often build tools like Webpack or Gulp, needed to get a site to a production-ready state."}),(0,n.jsx)("li",{children:"Dependencies are code actually used in the functioning of the site, like Lodash or Normalize.css."})]}),(0,n.jsx)("p",{children:"Existing projects that weren\u2019t built with package managers in mind offer an opportunity for engineering teams to implement them for all new development. Teams should also estimate and plan around the time needed to retrofit the existing codebase."}),(0,n.jsx)("p",{children:"If you are using a package where the naming and usage isn\u2019t obvious to the average engineer, be sure to document its purpose in the README, style guide, or project documentation."}),(0,n.jsx)(t.Z,{level:3,children:"Selecting Packages"}),(0,n.jsx)("p",{children:"Packages are often a Matryoshka of their own dependencies. Though this code is almost certainly all open source, it\u2019s not practical to apply the same scrutiny to packages\u2019 code as is expected before selecting WordPress themes and plugins. Effective package selection, therefore, relies on other factors that engineers can quickly evaluate:"}),(0,n.jsxs)("ul",{children:[(0,n.jsx)("li",{children:"Is the package actively developed and supported?"}),(0,n.jsx)("li",{children:"Does the package have a solid reputation in the community?"}),(0,n.jsx)("li",{children:"How frequently have security issues been reported, and how quickly have they historically been addressed?"}),(0,n.jsx)("li",{children:"Does the package require a small number of dependencies?"}),(0,n.jsx)("li",{children:"How easily could the packages\u2019 code be forked in case it\u2019s abandoned or a critical issue needs to be addressed right away? When evaluating this, consider the package\u2019s open source license along with the ease of modifying the code."})]}),(0,n.jsx)(t.Z,{level:3,children:"Package Versions and Lock"}),(0,n.jsx)("p",{children:"When installing a package, engineers can specify a version string the package manager uses to select an appropriate package version. Never specify an exact x.y.z version or else security, performance, and functionality upgrades won\u2019t be available. Most third-party packages follow the Semantic Versioning (semver.org) system, where packages\u2019 version numbers are defined in terms of major, minor, and patch levels. Changes to semver-compliant packages are expected to trigger a new major version when breaking backward compatibility."}),(0,n.jsx)("p",{children:"Instead of a full x.y.z version, Specify major & minor versions x.y to minimize the risk of breaking changes being introduced into your project. Start version number strings with a caret (^) for most dependencies, for example ^1.2"}),(0,n.jsx)("p",{children:"For dependencies that don\u2019t use semver, like many WordPress themes and plugins, engineers should still specify major and minor versions x.y. Start version numbers with a tilde (~) for most dependencies."}),(0,n.jsx)("p",{children:"Modern package managers create lock files, such as npm\u2019s \u201cpackage-lock.json\u201d and Composer\u2019s \u201ccomposer.lock\u201d. These files record the package versions each package manager chose to satisfy the version number constraints on the current version of the platform. Lock files should be committed to project version control repos so all engineers can be on the same page."}),(0,n.jsx)(t.Z,{level:3,children:"Composer Based Project Structure"}),(0,n.jsx)("p",{children:"Here\u2019s how we might structure a project with Composer:"}),(0,n.jsx)("pre",{children:(0,n.jsx)("code",{className:"language-markup",children:"|- composer.json ____________________________ # Define third party dependencies\n  |- wp-config.php ____________________________ # WordPress configuration\n  |- wp/ ______________________________________ # Composer install WordPress here\n  |- wp-content/ ______________________________ # Composer dependencies\n  |  |- themes/ _______________________________ # Themes directory\n  |    |- custom-theme/ _______________________ # Custom theme\n  |  |- plugins/ ______________________________ # Plugins directory\n  |    |- custom-plugin/ ______________________ # Custom plugin"})}),(0,n.jsxs)("p",{children:["Here\u2019s what ",(0,n.jsx)("code",{children:"composer.json"})," might look like with some example plugins:"]}),(0,n.jsx)("pre",{children:(0,n.jsx)("code",{className:"language-json",children:'{\n    "name": "entermedia/project-slug",\n    "description": "Project description",\n    "repositories":[\n      {\n        "type":"composer",\n        "url":"https://wpackagist.org"\n      }\n    ],\n    "extra": {\n      "wordpress-install-dir": "wp"\n    },\n    "require": {\n      "johnpbloch/wordpress": "4.9",\n      "wpackagist-plugin/wordpress-importer": "dev-trunk",\n      "wpackagist-plugin/debug-bar": "dev-trunk",\n      "wpackagist-plugin/debug-bar-extender": "dev-trunk",\n    }\n  }\n  '})})]})})]})}s(4335),s(4277)},4277:function(){Prism.languages.json={property:{pattern:/(^|[^\\])"(?:\\.|[^\\"\r\n])*"(?=\s*:)/,lookbehind:!0,greedy:!0},string:{pattern:/(^|[^\\])"(?:\\.|[^\\"\r\n])*"(?!\s*:)/,lookbehind:!0,greedy:!0},comment:{pattern:/\/\/.*|\/\*[\s\S]*?(?:\*\/|$)/,greedy:!0},number:/-?\b\d+(?:\.\d+)?(?:e[+-]?\d+)?\b/i,punctuation:/[{}[\],]/,operator:/:/,boolean:/\b(?:false|true)\b/,null:{pattern:/\bnull\b/,alias:"keyword"}},Prism.languages.webmanifest=Prism.languages.json}},function(e){e.O(0,[247,521,416,774,888,179],(function(){return _=6731,e(e.s=_);var _}));var _=e.O();_N_E=_}]);